/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: jetty/9.4.12.v20180830
 * Generated at: 2019-04-05 20:01:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.snippet;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.serotonin.m2m2.Common;

public final class message_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(9);
    _jspx_dependants.put("jar:file:/C:/free-m2m2-core-3.5.6/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fmt.tld", Long.valueOf(1425993070000L));
    _jspx_dependants.put("jar:file:/C:/free-m2m2-core-3.5.6/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/fn.tld", Long.valueOf(1425993070000L));
    _jspx_dependants.put("jar:file:/C:/free-m2m2-core-3.5.6/lib/spring-webmvc-5.0.10.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1539603408000L));
    _jspx_dependants.put("file:/C:/free-m2m2-core-3.5.6/lib/spring-webmvc-5.0.10.RELEASE.jar", Long.valueOf(1554492895779L));
    _jspx_dependants.put("/WEB-INF/jsp/include/tech.jsp", Long.valueOf(1554492877585L));
    _jspx_dependants.put("/WEB-INF/m2m2.tld", Long.valueOf(1554492876925L));
    _jspx_dependants.put("/WEB-INF/serotonin.tld", Long.valueOf(1554492876912L));
    _jspx_dependants.put("file:/C:/free-m2m2-core-3.5.6/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1554492893592L));
    _jspx_dependants.put("jar:file:/C:/free-m2m2-core-3.5.6/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425993070000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.serotonin.m2m2.Common");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write(_jspx_char_array_0);

String[] mangoMessageKeys = {
		
	    "common.active",
	    "common.alarmLevel",
	    "common.alarmLevel.greaterthan.none",
	    "common.alarmLevel.greaterthan.info",
	    "common.alarmLevel.greaterthan.important",
	    "common.alarmLevel.greaterthan.warning",
	    "common.alarmLevel.greaterthan.urgent",
	    "common.alarmLevel.greaterthan.critical",
	    "common.alarmLevel.greaterthan.lifeSafety",
	    "common.alarmLevel.none",
	    "common.alarmLevel.none.rtn",
	    "common.alarmLevel.info",
	    "common.alarmLevel.info.rtn",
	    "common.alarmLevel.important",
	    "common.alarmLevel.important.rtn",
	    "common.alarmLevel.warning",
	    "common.alarmLevel.warning.rtn",
	    "common.alarmLevel.urgent",
	    "common.alarmLevel.urgent.rtn",
	    "common.alarmLevel.critical",
	    "common.alarmLevel.critical.rtn",
	    "common.alarmLevel.lifeSafety",
	    "common.alarmLevel.lifeSafety.rtn",
	    "common.alarmLevel.unknown",
	    "common.all",
	    "common.dateRangeFrom",
	    "common.dateRangeTo",
	    "common.duration",
	    "common.durationStd",
	    "common.durationDays",
	    "common.inactiveTime",
		"common.nortn",
		"common.name",
		"common.status",
	    "common.time",
		"common.totalResults",
		"common.clearDates",
		"common.xid",
		
		"chartRenderer.none",
		"chartRenderer.image",
		"chartRenderer.flipbook",
		"chartRenderer.statistics",
		"chartRenderer.table",
		
	    "dsList.name",
	    "dsList.type",
	    "dsList.connection",
	    "dsList.status",
	    
	    "dsEdit.deviceName",
	    "dsEdit.dataSourceType",
	    "dsEdit.pointDataType",
	    "dsEdit.pointSaved",
	    "dsEdit.dataSourceSaved",
	    "dsEdit.saved",
	    "dsEdit.saveWarning",
	    "dsEdit.points.details",
	    
	    "emport.export",
	    "emport.import",
	    
	    "event.rtn.rtn",
	    
        "events.acknowledge",
        "events.acknowledged",
        "events.editDataSource",
        "events.editEventHandler",
        "events.editPublisher",
	    "events.id",
        "events.msg",
        "events.pointDetails",
        "events.pointEdit",
	    "events.silence",
	    "events.showAuditEvents",
        "events.unsilence",
        "events.unacknowledged",
        
	    
        "header.dataPoints",
        
        "modules.modules",
        
	    "notes.addNote",
	    "notes.enterComment",
	    
	    "pointEdit.chart.missingLimit",
	    "pointEdit.chart.invalidLimit",
	    "pointEdit.chart.missingPeriods",
	    "pointEdit.chart.invalidPeriods",
	    "pointEdit.detectors.highLimit",
	    "pointEdit.detectors.lowLimit",
	    "pointEdit.detectors.change",
	    "pointEdit.detectors.state",
	    "pointEdit.detectors.changeCount",
	    "pointEdit.detectors.noChange",
	    "pointEdit.detectors.noUpdate",
	    "pointEdit.detectors.posCusum",
	    "pointEdit.detectors.negCusum",
	    "pointEdit.detectors.regexState",
	    "pointEdit.detectors.range",
        "pointEdit.detectors.smoothness",
        "pointEdit.detectors.analogChange",
	    "pointEdit.logging.period",
	    "pointEdit.logging.tolerance",	    
	    "pointEdit.logging.type",
	    "pointEdit.logging.type.change",
	    "pointEdit.logging.type.all",
	    "pointEdit.logging.type.never",
	    "pointEdit.logging.type.interval",
	    "pointEdit.logging.type.tsChange",     
	    "pointEdit.template.templateName",  
        
        "filter.byReadPermissions",
        "filter.bySetPermissions",
        
        "table.confirmDelete.DataSource",
        "table.confirmDelete.DataPoint",
        "table.confirmDelete.AllDataPoints",
        
        "table.edit",
        "table.add",
        "table.delete",
        "table.copy",
        "table.toggle",
        "table.export",
        "table.exportCSV",
        "table.noData",
        "table.missingKey",
        "table.error.wrongId",
        "table.error.dwr",
        "table.pointDetails",
        
        "textRenderer.analog",
        "textRenderer.binary",
        "textRenderer.multistate",
        "textRenderer.none",
        "textRenderer.plain",
        "textRenderer.range",
        "textRenderer.time",
        "textRenderer.engineeringUnits",        
        
        "view.browse",
        "view.clear",
        "view.submit",
        
};
application.setAttribute("mangoMessageKeys",mangoMessageKeys);


      out.write(_jspx_char_array_1);
      //  c:out
      org.apache.taglibs.standard.tag.rt.core.OutTag _jspx_th_c_005fout_005f0 = (org.apache.taglibs.standard.tag.rt.core.OutTag) _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.OutTag.class);
      boolean _jspx_th_c_005fout_005f0_reused = false;
      try {
        _jspx_th_c_005fout_005f0.setPageContext(_jspx_page_context);
        _jspx_th_c_005fout_005f0.setParent(null);
        // /WEB-INF/snippet/message.jsp(172,15) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_c_005fout_005f0.setValue( Common.NEW_ID );
        int _jspx_eval_c_005fout_005f0 = _jspx_th_c_005fout_005f0.doStartTag();
        if (_jspx_th_c_005fout_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fc_005fout_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005fout_005f0);
        _jspx_th_c_005fout_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fout_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fout_005f0_reused);
      }
      out.write(_jspx_char_array_2);
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write(_jspx_char_array_5);
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/snippet/message.jsp(177,1) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/snippet/message.jsp(177,1) '${mangoMessageKeys}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${mangoMessageKeys}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/snippet/message.jsp(177,1) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("messageKey");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write(_jspx_char_array_3);
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${messageKey}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write(_jspx_char_array_4);
            if (_jspx_meth_fmt_005fmessage_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            out.write('"');
            out.write(';');
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_fmt_005fmessage_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  fmt:message
    org.apache.taglibs.standard.tag.rt.fmt.MessageTag _jspx_th_fmt_005fmessage_005f0 = (org.apache.taglibs.standard.tag.rt.fmt.MessageTag) _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.standard.tag.rt.fmt.MessageTag.class);
    boolean _jspx_th_fmt_005fmessage_005f0_reused = false;
    try {
      _jspx_th_fmt_005fmessage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_fmt_005fmessage_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/snippet/message.jsp(178,30) name = key type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_fmt_005fmessage_005f0.setKey((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${messageKey}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      int _jspx_eval_fmt_005fmessage_005f0 = _jspx_th_fmt_005fmessage_005f0.doStartTag();
      if (_jspx_th_fmt_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005ffmt_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_fmt_005fmessage_005f0);
      _jspx_th_fmt_005fmessage_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_fmt_005fmessage_005f0, _jsp_getInstanceManager(), _jspx_th_fmt_005fmessage_005f0_reused);
    }
    return false;
  }
  static char[] _jspx_char_array_0 = "\n\n\n<!-- Add in useful messages for page, also done in M2M2ContextListener, should be moved to here -->\n".toCharArray();
  static char[] _jspx_char_array_1 = "\n\n\n\n<script type=\"text/javascript\">\n	\n	//Setup the mango New ID Parameter\n	mango.newId = ".toCharArray();
  static char[] _jspx_char_array_2 = ";\n	\n	\n	//Create a global array of available messages\n	var mangoMsg = {};\n	".toCharArray();
  static char[] _jspx_char_array_3 = "\n	mangoMsg['".toCharArray();
  static char[] _jspx_char_array_4 = "'] = \"".toCharArray();
  static char[] _jspx_char_array_5 = "\n\n	\n	function mangoImg(name) {\n		return \"/images/\" + name;\n	}\n	\n	function mangoTranslate(key, vars) {\n	    var msg = mangoMsg[key];\n       if(typeof msg == 'undefined'){\n           console.log(\"Missing Key in mangoMsg: \" + key);\n           return \"Missing Msg Key: \" + key;\n       }\n\n	    if (typeof vars == 'undefined') {\n	        return msg;\n	    }\n	    \n\n	    \n	    for (var i = 0; i < vars.length; i++) {\n		        msg = msg.replace(\"'{\" + i + \"}'\", vars[i]);\n		        msg = msg.replace(\"{\" + i + \"}\", vars[i]);\n		}\n	    return msg;\n	}\n	\n	/**\n	 * Some description on how to use this would be good.\n	 */\n	function mangoAppendTranslations(map) {\n		if(typeof(map) != \"object\")\n			return;\n		for(key in map) {\n			if(key in mangoMsg)\n				console.log(\"Recieved duplicate key: \" + key);\n			else if(typeof(map[key]) != \"string\")\n				console.log(\"Recieved nonstring value as translation for: \" + key);\n			else\n				mangoMsg[key] = map[key];\n		}\n	}\n</script>".toCharArray();
}
