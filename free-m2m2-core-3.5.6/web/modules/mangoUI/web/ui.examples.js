(window.webpack_jsonp_mangoUI=window.webpack_jsonp_mangoUI||[]).push([[14],{3501:function(e,n,t){e.exports=t.p+"img/threeCardA.png?v=ae15f2972e4a7a841e1bc3093ad80c8d"},3502:function(e,n,t){e.exports=t.p+"img/threeCardB.png?v=69ae412aa9385f9d3e38537288b32719"},3503:function(e,n,t){e.exports=t.p+"img/fourCardC.png?v=d9245155c967132b97a9c96546550d62"},3504:function(e,n,t){e.exports=t.p+"img/fourCardA.png?v=f6d402c13404cefd72b42fe61367cc58"},3505:function(e,n,t){e.exports=t.p+"img/fourCardB.png?v=31ee5826909fc25b723ae012bf1f7724"},3506:function(e,n,t){e.exports=t.p+"img/nineCard.png?v=0e6a9fbad80e04e4e9a1d9e562ffc44b"},3507:function(e,n,t){e.exports=t.p+"img/fourSquare.png?v=ff29949217557fd9c3e705042d7cd20a"},3508:function(e,n,t){e.exports=t.p+"img/fourTop.png?v=9de679264de6621469f44a9a32cb740f"},3509:function(e,n,t){e.exports=t.p+"img/fiveCardA.png?v=2c22d8099e51e17f570a54f33809d104"},3510:function(e,n,t){e.exports=t.p+"img/fiveCardB.png?v=94e9fadabadbfd7c4417d5b4a8a402ac"},3511:function(e,n,t){e.exports=t.p+"img/fiveCardC.png?v=c0fd57ea2e403ffdeb280cb98f2fa430"},3512:function(e,n,t){e.exports=t.p+"img/fiveCardD.png?v=f294a0a4021f15a7ec7530e8aacf1123"},3588:function(e,n){e.exports='<h1 ma-tr="ui.dox.playArea"></h1>\n\n<p>You can use this area as a play area. Changes will be persisted after you press <strong>Save</strong>.\n<br><a ui-sref="ui.examples.playAreaBig">Play Area View Only</a>\n</p>\n\n<ma-state-params state-params="stateParams"></ma-state-params>\n\n<ma-json-store xid="play-area-{{User.current.username}}" item="playArea" value="paVal"\n  ng-init="playArea={readPermission: \'user\', editPermission: \'user\'}" item-loaded="$item.jsonData.text=stateParams.markup||$item.jsonData.text">\n</ma-json-store>\n\n<div layout="row" layout-align="start center" style="margin-bottom:10px;">\n    <md-button class="md-raised md-primary md-hue-3" ng-click="playArea.$save()">\n        <md-icon>save</md-icon>\n        <span ma-tr="common.save"></span>\n    </md-button>\n    <md-button ng-click="stateParams.markup = \'\'; playArea.$get()">\n        <md-icon>undo</md-icon>\n        <span ma-tr="ui.app.revert"></span>\n     </md-button>\n     <div flex></div>\n\n     <md-switch ng-model="showEditor" ng-init="showEditor = true" ma-tr-aria-label="ui.app.editor" ng-change="showPreview = showEditor ? showPreview : true"><span ma-tr="ui.app.editor"></span></md-switch>\n     <md-switch ng-model="showPreview" ng-init="showPreview = true" ma-tr-aria-label="ui.app.preview" ng-change="showEditor = showPreview ? showEditor : true"><span ma-tr="ui.app.preview"></span></md-switch>\n</div>\n\n<ul>\n  <li><a ui-sref="ui.settings.editPages({markup: paVal.text})" ma-tr="ui.app.copyToNewPage"></a></li>\n</ul>\n\n<div layout="column" layout-gt-md="row">\n    <div flex="100" layout="column" style="min-width: 50%;" ng-show="showEditor">\n        <md-card flex layout="column">\n            <md-card-title flex="nogrow">\n              <md-card-title-text>\n                <span class="md-headline" ma-tr="ui.dox.markup"></span>\n              </md-card-title-text>\n            </md-card-title>\n            <md-card-content flex layout="column">\n                <ma-ace-editor flex style="height:500px" ng-model="paVal.text" ng-model-options="{debounce: 1000}"></ma-ace-editor>\n            </md-card-content>\n        </md-card>\n    </div>\n    <div flex="100" style="min-width: 50%;" ng-show="showPreview">\n        <md-card>\n            <md-card-title>\n              <md-card-title-text>\n                <span class="md-headline" ma-tr="ui.dox.result"></span>\n              </md-card-title-text>\n            </md-card-title>\n            <md-card-content>\n                <div ma-ui-live-preview="paVal.text"></div>\n            </md-card-content>\n        </md-card>\n    </div>\n</div>'},3589:function(e,n){e.exports='<h1>Demo</h1>\n\n<ma-json-store xid="play-area-{{User.current.username}}" item="playArea" value="paVal"></ma-json-store>\n\n<div layout="row">\n    <div flex="100">\n        <div ma-ui-live-preview="paVal.text"></div>\n    </div>\n</div>\n'},3590:function(e,n){e.exports='<h1 ma-tr="ui.dox.angular"></h1>\n\n<p>\n    The Mango UI module uses <a href="https://angularjs.org/" target="_blank">AngularJS</a> and <a\n    href="https://material.angularjs.org/latest/" target="_blank">AngularJS Material Design</a> to make building dashboards easy\n    using simple HTML-like markup. The aim is that you should not have to write any JavaScript. This page will give you a basic\n    introduction to using AngularJS in your markup. Please see <a href="http://www.w3schools.com/angular/angular_examples.asp"\n                                                                  target="_blank">W3 Schools</a> for more basic examples.\n</p>\n\n<p>\n    Use <code ng-non-bindable>{{ variable }}</code> double curly braces to surround AngularJS expressions/variables that you want\n    inserted into your page. This is called interpolation.\n</p>\n\n<p>\n    Use <code>ng-init</code> to initialize your variables to any default value.\n    Use the <code>ng-bind</code> attribute to one-way bind the contents of an element to a variable.\n    Use the <code>ng-model</code> attribute to two-way bind a variable with an input.\n    In this example <code>&lt;pre ng-bind="variableName | json"&gt;&lt;/pre&gt;</code> is used to output a predefined javascript object as\n    json into the pre-formatted element.\n</p>\n\n<p>\n    The rest of the example pages will introduce you to the <code>Mango UI Components</code> (also referred to as <code>\n    directives</code>) that are available for you to use in your custom pages.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="column" ng-init="myVar = \'Hello\'; myObj = {property1: \'test\', property2: 433.555}">\n    <div>\n        Using interpolation, your variable is {{myVar}}\n    </div>\n    <div>\n        Using ng-bind, your variable is <span ng-bind="myVar"></span>\n    </div>\n    <br>\n\n    <md-input-container>\n        <label>Enter a number</label>\n        <input type="number" ng-model="myNumber">\n    </md-input-container>\n\n    <div>Your number plus 10 is {{myNumber + 10}}.</div>\n    <br>\n\n    <h3>Output an object to the page as JSON:</h3>\n    <pre ng-bind="myObj | json"></pre>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3591:function(e,n){e.exports='<h1 ma-tr="ui.dox.pointList"></h1>\n\n<p>\n    The <code>&lt;ma-point-list&gt;</code> directive displays a list of data points which you can select from.\n    All data points added to your Mango system will display by default.\n</p>\n\n<p>\n    You can optionally supply the <code>query</code> attribute to filter the list of points using an object where the keys are the\n    property names to filter on, or\n    supply a <a href="http://www.persvr.org/rql/" target="_blank">RQL</a> query string inside single quotes.\n</p>\n\n<p>\n    The <code>&lt;ma-filtering-point-list&gt;</code> directive allows you to select a data point by filtering on device names or\n    point names that contain the text.\n    Search results will update as you type.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointList"><code>&lt;ma-point-list&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maFilteringPointList"><code>&lt;ma-filtering-point-list&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="column">\n    <md-input-container>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n\n    <p>You have chosen point "{{myPoint.name}}". It is {{myPoint.enabled ? \'enabled\' : \'disabled\'}} and belongs to device\n        {{myPoint.deviceName}}</p>\n\n    <h3>Filter using second input</h3>\n\n    <md-input-container>\n        <label>Search by point name</label>\n        <input ng-model="nameFilter" ng-model-options="{debounce:500}">\n    </md-input-container>\n\n    <md-input-container>\n        <label>Filtered point list</label>\n        <ma-point-list limit="200" ng-model="myPoint2" query="{name:nameFilter}"></ma-point-list>\n    </md-input-container>\n\n    <md-input-container>\n        <label>Filtered point list using RQL</label>\n        <ma-point-list ng-model="myPoint3" query="\'name=like=*\'+nameFilter+\'*&amp;limit(100)\'"></ma-point-list>\n    </md-input-container>\n\n    <h3>Self filtering input</h3>\n\n    <ma-filtering-point-list ng-model="myPoint4"></ma-filtering-point-list>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3592:function(e,n){e.exports='<h1 ma-tr="ui.dox.getPointByXid"></h1>\n\n<p>\n    You can use this syntax for <code>&lt;ma-point-value&gt;</code>, <code>&lt;ma-get-point-value&gt;</code> &amp;\n    <code>&lt;ma-point-values&gt;</code>.\n</p>\n\n<p>\n    The XID of the data point you want to display is manually passed as a string to the <code>point-xid</code> attribute.\n</p>\n\n<p>\n    Note, this example uses a data point XID from the example virtual data sources, you can <a\n    ui-sref="ui.settings.importExport">import</a> this\n    <a href="/modules/mangoUI/web/configs/demoMangoConfig.json" target="_blank">JSON file</a>\n    or enter your own XIDs.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointValue"><code>&lt;ma-point-value&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maGetPointValue"><code>&lt;ma-get-point-value&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n\x3c!-- Display a point value using only its XID --\x3e\n<p>\n    The point value is <ma-point-value point-xid="DP_355369"></ma-point-value>\n</p>\n\n\x3c!-- Get a point (and value) using its XID and assign it to an output variable "myPoint" --\x3e\n<ma-get-point-value point-xid="DP_698831" point="myPoint"></ma-get-point-value>\n\n<p>\n    The point name is "{{myPoint.name}}" and its value is {{myPoint.renderedValue}}.\n</p>\n\n</ma-ui-dual-pane-editor>\n'},3593:function(e,n){e.exports='<h1 ma-tr="ui.dox.dataSourceAndDeviceList"></h1>\n\n<p>\n    The <code>&lt;ma-data-source-list&gt;</code> directive displays a list of Mango data sources. The selected data source will be\n    output to the variable specified\n    by the <code>ng-model</code> attribute.\n</p>\n\n<p>\n    The <code>&lt;ma-device-name-list&gt;</code> directive displays a list of Mango device names. The selected device name will be\n    output to the variable specified\n    by the <code>ng-model</code> attribute.\n</p>\n\n<p>\n    There are also <code>&lt;ma-data-source-query&gt;</code> and <code>&lt;ma-device-name-query&gt;</code> directives which output\n    an array of data source objects\n    and device name strings respectively.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maDataSourceList"><code>&lt;ma-data-source-list&gt;</code></a>,\n    <a ui-sref="ui.docs.ngMango.maDeviceNameList"><code>&lt;ma-device-name-list&gt;</code></a>,\n    <a ui-sref="ui.docs.ngMango.maDataSourceQuery"><code>&lt;ma-data-source-query&gt;</code></a>\n    and <a ui-sref="ui.docs.ngMango.maDeviceNameQuery"><code>&lt;ma-device-name-query&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="column">\n    <md-input-container>\n        <label>Choose a data source</label>\n        <ma-data-source-list ng-model="myDataSource"></ma-data-source-list>\n    </md-input-container>\n\n    <p>You have chosen data source "{{myDataSource.name}}". It is {{myDataSource.enabled ? \'enabled\' : \'disabled\'}} and has an\n        XID of {{myDataSource.xid}}.</p>\n\n    <md-input-container>\n        <label>Device names for selected data source</label>\n        <ma-device-name-list ng-model="myDeviceName" data-source-xid="myDataSource.xid"></ma-device-name-list>\n    </md-input-container>\n\n    <md-input-container>\n        <label>Points for selected device name</label>\n        <ma-point-list query="{deviceName: myDeviceName}" limit="100" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n\n    <ma-data-source-query data-sources="dataSourcesArray" query="{name: \'meter\'}" limit="100"></ma-data-source-query>\n    <h2>Data sources with name matching \'meter\'</h2>\n    <pre ng-bind="dataSourcesArray | json"></pre>\n\n    <h2>Device names containing \'meter\'</h2>\n    <ma-device-name-query device-names="deviceNames" contains="\'meter\'"></ma-device-name-query>\n    <pre ng-bind="deviceNames | json"></pre>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3594:function(e,n){e.exports='<h1 ma-tr="ui.dox.liveValues"></h1>\n\n<p>\n    This example shows the differences between <code>&lt;ma-point-value&gt;</code> and <code>&lt;ma-get-point-value&gt;</code>.\n</p>\n\n<p>\n    The <code>&lt;ma-point-value&gt;</code> directive will render the live value and other data from the data point. You can\n    optionally supply the <code>display-type</code>\n    attribute to get the unit converted value or data/time of the update.\n</p>\n\n<p>\n    The <code>&lt;ma-get-point-value&gt;</code> will provide a point variable (named \'myPoint\' in this example) that you can use\n    in the scope of your\n    angular app. Live values can be displayed as text within your HTML by using <code ng-non-bindable>{{myPoint.value}}</code> or\n    <code ng-non-bindable>{{myPoint.renderedValue}}</code> syntax.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointValue"><code>&lt;ma-point-value&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maGetPointValue"><code>&lt;ma-get-point-value&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<md-input-container>\n    <label>Choose a point</label>\n    <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n</md-input-container>\n\n<label>Rendered point value:</label>\n<ma-point-value point="myPoint"></ma-point-value>\n<br>\n\n<label>Unit converted point value:</label>\n<ma-point-value point="myPoint" display-type="converted"></ma-point-value>\n<br>\n\n<label>Date/time point value:</label>\n<ma-point-value point="myPoint" display-type="dateTime"></ma-point-value>\n<br>\n\n<label>Format time using <a href="http://momentjs.com/docs/#/displaying/" target="_blank">Moment.js format string</a>:</label>\n<ma-point-value point="myPoint" display-type="dateTime" date-time-format="LTS"></ma-point-value>\n<br>\n\n<h3>Using AngularJS interpolation</h3>\n<p><strong>Note: You need to have a <code>&lt;ma-get-point-value&gt;</code> tag for these to work.</strong></p>\n\n<ma-get-point-value point="myPoint"></ma-get-point-value>\n\n<p>Raw point value is {{myPoint.value}} at epoch timestamp {{myPoint.time}}.</p>\n<p>Rendered point value is <span ng-style="{color:myPoint.renderedColor}">{{myPoint.renderedValue}}</span>.</p>\n\n</ma-ui-dual-pane-editor>\n'},3595:function(e,n){e.exports="<h1 ma-tr=\"ui.dox.filters\"></h1>\n\n<p>\n    We can use <a href=\"https://docs.angularjs.org/guide/filter\" target=\"_blank\">AngularJS filters</a> to format interpolated\n    values and manipulate values.\n    Filters in the HTML always follow the <code ng-non-bindable>{{ expression | filter }}</code> syntax.\n    The standard AngularJS filters are available such as <code>number</code> and <code>currency</code> as well as custom filters\n    included with the UI module.\n</p>\n\n<p>\n    Custom filters include <code>moment</code> and <code>duration</code> for using\n    <a href=\"http://momentjs.com/\" target=\"_blank\">Moment.js</a> to manipulate dates and durations.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref=\"ui.docs.ngMangoFilters.moment\"><code>moment</code></a> and <a\n    ui-sref=\"ui.docs.ngMangoFilters.duration\"><code>duration</code></a> filters.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<md-input-container>\n    <label>Choose a point</label>\n    <ma-point-list limit=\"200\" ng-model=\"myPoint\"></ma-point-list>\n</md-input-container>\n\n<ma-get-point-value point=\"myPoint\"></ma-get-point-value>\n\n<p>\n    The raw point value is {{myPoint.value}} at epoch timestamp {{myPoint.time}}.\n</p>\n\n<p>\n    The formatted point value is {{myPoint.value | number:2}} at time {{myPoint.time | maMoment:'format':'ll LTS'}}.\n</p>\n\n<p ng-init=\"price=1234.565\">\n    The price is {{price | currency}}.\n</p>\n\n<p>\n    The time now as an ISO formatted string is {{'now' | maMoment:'toISOString'}}.\n</p>\n\n<p ng-init=\"timeTaken=67223455\">\n    {{timeTaken}}ms is {{timeTaken|maDuration:'humanize'}}\n</p>\n\n<p>\n    The first day of the month was a {{'now' | maMoment:'startOf':'month' | maMoment:'format':'dddd'}}.\n</p>\n\n<p>\n    Three days from now is {{'now' | maMoment:'add':3:'days' | maMoment:'format':'LLL'}}.\n</p>\n\n</ma-ui-dual-pane-editor>\n"},3596:function(e,n){e.exports='<h1 ma-tr="ui.dox.datePresets"></h1>\n\n<p>\n    Use the <code>&lt;ma-date-range-picker&gt;</code> directive to insert a date range preset picker.\n    This enables you to choose from a list of commonly used date ranges, such as <code>Today so far</code> or <code>Previous\n    week</code>. You can set the <code>preset</code> to choose your default date range value.\n    Set the <code>update-interval</code> attribute to have it update automatically.</p>\n\n<p>\n    Use the <code>&lt;ma-date-picker&gt;</code> directive to display a date/time picker that will open in a popup dialog box. Note\n    that you can also add it as an attribute to an existing <code>&lt;input&gt;</code> tag.\n</p>\n\n<p>\n    ou can link <code>&lt;ma-date-range-picker&gt;</code> and <code>&lt;ma-date-picker&gt;</code> by outputting <code>from</code>\n    and <code>to</code> values from <code>&lt;ma-date-range-picker&gt;</code>,\n    and inputing the values into <code>ng-model</code> attributes on <code>&lt;ma-date-picker&gt;</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maDatePicker"><code>&lt;ma-date-picker&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maDateRangePicker"><code>&lt;ma-date-range-picker&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row" layout-xs="column">\n    <md-input-container flex>\n        <label>Preset</label>\n        <ma-date-range-picker from="from" to="to" preset="LAST_1_DAYS" update-interval="5 seconds"></ma-date-range-picker>\n    </md-input-container>\n    <md-input-container flex>\n        <label>From date</label>\n        <ma-date-picker ng-model="from"></ma-date-picker>\n    </md-input-container>\n    <md-input-container flex>\n        <label>To date</label>\n        <ma-date-picker ng-model="to"></ma-date-picker>\n    </md-input-container>\n</div>\n\n<p>Alternatively use the date and time pickers individually</p>\n<div layout="row">\n    <mdp-date-picker mdp-placeholder="From date" mdp-open-on-click mdp-format="ll" ng-model="from"></mdp-date-picker>\n    <mdp-time-picker mdp-placeholder="From time" mdp-open-on-click mdp-auto-switch="true" ng-model="from"\n                     mdp-format="LTS"></mdp-time-picker>\n</div>\n<div layout="row">\n    <mdp-date-picker mdp-placeholder="To date" mdp-open-on-click mdp-format="ll" ng-model="to"></mdp-date-picker>\n    <mdp-time-picker mdp-placeholder="To time" mdp-open-on-click mdp-auto-switch="true" ng-model="to"\n                     mdp-format="LTS"></mdp-time-picker>\n</div>\n\n<p>\n    You have chosen a date range of {{ from | maMoment:\'format\':\'ll LTS\' }} to {{ to | maMoment:\'format\':\'ll LTS\' }}.\n</p>\n\n</ma-ui-dual-pane-editor>\n'},3597:function(e,n){e.exports='<h1 ma-tr="ui.dox.styleViaValue"></h1>\n\n<p>\n    This example shows how to use Angular\'s built in\n    <a href="https://www.w3schools.com/angular/ng_ng-class.asp" target="_blank">ng-class</a>\n    attribute for switching CSS classes based on a data point value.\n</p>\n\n<p>\n    In addition an example using <a href="https://www.w3schools.com/angular/ng_ng-switch.asp" target="_blank">ng-switch</a> is\n    demonstrated.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<style>\n    .default {\n        background-color: black;\n        color: white;\n    }\n\n    .good {\n        background-color: green;\n    }\n\n    .warn {\n        background-color: orange;\n    }\n\n    .bad {\n        background-color: red;\n    }\n</style>\n\n<md-input-container>\n    <label>Choose a point</label>\n    <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n</md-input-container>\n\n<h3>CSS class based on range (numeric points)</h3>\n<div class="default"\n     ng-class="{\'good\': myPoint.value < 100, \'warn\': myPoint.value >= 100 && myPoint.value < 200, \'bad\': myPoint.value >= 200}">\n    <label>Point value:</label>\n    <ma-point-value point="myPoint"></ma-point-value>\n</div>\n\n<h3>CSS class based on exact value (multistate/binary points)</h3>\n<div class="default" ng-class="{\'good\': myPoint.value === 0, \'warn\': myPoint.value === 1, \'bad\': myPoint.value === 2}">\n    <label>Point value:</label>\n    <ma-point-value point="myPoint"></ma-point-value>\n</div>\n\n<h3>Hide/show based on value</h3>\n<div class="default good" ng-show="myPoint.value === 0">\n    <label>Point value:</label>\n    <ma-point-value point="myPoint"></ma-point-value>\n</div>\n<div class="default bad" ng-hide="myPoint.value === 0">\n    <label>Point value:</label>\n    <ma-point-value point="myPoint"></ma-point-value>\n</div>\n\n<h3>Switch based on value</h3>\n<div ng-switch="myPoint.value">\n    <div ng-switch-when="0">Point is zero</div>\n    <div ng-switch-when="1">Point is one</div>\n    <div ng-switch-default>Point has other value</div>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3598:function(e,n){e.exports='<h1 ma-tr="ui.dox.pointValues"></h1>\n\n<p>\n    The <code>&lt;ma-point-values&gt;</code> returns an array of historical values on a data point to its <code>values</code>\n    attribute. In this example <code>&lt;ma-point-values&gt;</code> is passed <code>to</code> &amp; <code>from</code> values from the\n    <a ui-sref="ui.help.dateBar">Date Bar</a>. Additionally, <code>rollup</code> &amp; <code>rollup-interval</code> is inputted\n    from the Date Bar.\n</p>\n\n<p>\n    The resulting array of data is stored in <code>point1Values</code>. To display this data we are using a table and <code>ng-repeat</code>\n    to loop through the results and stamp out a table row for each value in the array. Angular\'s\n    <a href="http://www.w3schools.com/angular/ng_ng-repeat.asp" target="_blank">ng-repeat</a> is a fundamental angular\n    directive used to loop through items in an array and display an HTML template for each item. You will have access to\n    properties of the item if you are looping through an array of objects and can display them within the repeated template.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="point1"></ma-point-list>\n    </md-input-container>\n</div>\n\n<ma-point-values point="point1" values="point1Values" from="dateBar.from" to="dateBar.to" rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n\n<p>There are {{point1Values.length}} rows to display.</p>\n\n\n<md-table-container>\n    <table md-table>\n        <thead md-head>\n        <tr>\n            <th md-column>TimeStamp</th>\n            <th md-column>Point Value</th>\n        </tr>\n        </thead>\n        <tbody md-body>\n        <tr ng-repeat="value in point1Values">\n            <td md-cell>{{value.timestamp | maMoment:\'format\':\'ll LTS\'}}</td>\n            <td md-cell>{{value.rendered}}</td>\n        </tr>\n        </tbody>\n    </table>\n</md-table-container>\n\n</ma-ui-dual-pane-editor>\n'},3599:function(e,n){e.exports='<h1 ma-tr="ui.dox.latestPointValues"></h1>\n\n<p>\n    This example demonstrates using the <code>latest</code> attribute on <code>&lt;ma-point-values&gt;</code> rather then to/from\n    dates to return the last X number\n    of values on a data point. The <code>realtime</code> attribute can be set to <code>true</code> to have the last X number of\n    values update with live data.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="point1"></ma-point-list>\n    </md-input-container>\n    <md-input-container flex="25">\n        <label>Number of latest values</label>\n        <input ng-init="latestX=10" type="number" step="1" min="1" max="50" ng-model="latestX"\n               ng-model-options="{debounce:500}">\n    </md-input-container>\n    <md-switch ng-init="realtime=true" ng-model="realtime">\n        Realtime\n    </md-switch>\n</div>\n\n<div layout="row">\n\n</div>\n\n<ma-point-values point="point1" values="point1Values" latest="latestX" realtime="realtime" rendered="true">\n</ma-point-values>\n\n<md-table-container>\n    <table md-table>\n        <thead md-head>\n        <tr>\n            <th md-column>Time</th>\n            <th md-column>Value</th>\n        </tr>\n        </thead>\n        <tbody md-body>\n        <tr ng-repeat="value in point1Values | orderBy:\'-timestamp\'">\n            <td md-cell>{{value.timestamp | maMoment:\'format\':\'ll LTS\'}}</td>\n            <td md-cell>{{value.value}}</td>\n        </tr>\n        </tbody>\n    </table>\n</md-table-container>\n\n</ma-ui-dual-pane-editor>\n'},3600:function(e,n){e.exports='<h1 ma-tr="ui.dox.clocksAndTimezones"></h1>\n\n<p>\n    This example demonstrates using the <code>&lt;ma-clock&gt;</code> directive to display an analog style clock. By default dates and times\n    are formatted as the server or user timezone but you can set the timezone attribute to display the time in a specific timezone.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maClock"><code>&lt;ma-clock&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<ma-now update-interval="1 SECONDS" output="time" browser-timezone="browserTz"></ma-now>\n\n<div layout="row" layout-wrap>\n    <div flex="50" layout="column" layout-align="center center">\n        <span>{{time|maMoment:\'tz\':browserTz|maMoment:\'format\':\'ll LTS Z\'}}</span>\n        <ma-clock style="width: 100%; height: 200px;" time="time" timezone="{{browserTz}}" text="Browser timezone"></ma-clock>\n    </div>\n    <div flex="50" layout="column" layout-align="center center">\n        <span>{{time|maMoment:\'format\':\'ll LTS Z z\'}}</span>\n        <ma-clock style="width: 100%; height: 200px;" time="time" text="User/server timezone"></ma-clock>\n    </div>\n    <div flex="50" layout="column" layout-align="center center">\n        <span>{{time|maMoment:\'tz\':\'Australia/Sydney\'|maMoment:\'format\':\'ll LTS Z z\'}}</span>\n        <ma-clock style="width: 100%; height: 200px;" time="time" timezone="Australia/Sydney" text="Sydney"></ma-clock>\n    </div>\n    <div flex="50" layout="column" layout-align="center center">\n        <span>{{time|maMoment:\'tz\':\'America/Denver\'|maMoment:\'format\':\'ll LTS Z z\'}}</span>\n        <ma-clock style="width: 100%; height: 200px;" time="time" timezone="America/Denver" text="Denver"></ma-clock>\n    </div>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3601:function(e,n){e.exports='<h1 ma-tr="ui.dox.gauges"></h1>\n\n<p>\n    <code>&lt;ma-gauge-chart&gt;</code> will display a gauge/dial chart. Several properties have been exposed via attributes\n    on the component, allowing you to set colors and ranges of multiple bands, and style the arrow.\n</p>\n\n<p>\n    You must give the gauge a width and height, and you must use <code>&lt;ma-get-point-value&gt;</code> to provide a point\n    value to  <code>&lt;ma-gauge-chart&gt;</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maGaugeChart"><code>&lt;ma-gauge-chart&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Select numeric point:</h3>\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n</div>\n\n<ma-get-point-value point="myPoint"></ma-get-point-value>\n\n<div layout="row" layout-wrap>\n    <div flex="50">\n        <h3>Basic (defaults to 0-100)</h3>\n        <ma-gauge-chart point="myPoint" style="width:100%; height:200px"></ma-gauge-chart>\n    </div>\n    <div flex="50">\n        <h3>Set axis interval, start and end value</h3>\n        <ma-gauge-chart point="myPoint" interval="10" start="-20" end="120" style="width:100%; height:200px"></ma-gauge-chart>\n    </div>\n    <div flex="50">\n        <h3>Set color bands and style</h3>\n        <ma-gauge-chart point="myPoint" start="-20" band-1-end="20" band-2-end="40" band-2-color="yellow" band-3-end="80"\n        value-font-size="16"  value-offset="-50" tick-interval="10" arrow-inner-radius="30" arrow-alpha="0.7" axis-thickness="15"\n        axis-alpha="0.1" style="width:100%; height:200px"></ma-gauge-chart>\n    </div>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3602:function(e,n){e.exports='<h1 ma-tr="ui.dox.switchImage"></h1>\n\n<p>\n    <code>&lt;ma-switch-img&gt;</code> extends the basic HTML image element to allow switching of images based on a point value.\n    You can switch images based on binary, multi-state, strings, or just map any value from a data point using\n    <code>src-map</code>. Use <code>default-src</code> to set the default image that will display if no match is found or the\n    point is disabled.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maSwitchImg"><code>&lt;ma-switch-img&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Select binary/multi-state point:</h3>\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n</div>\n\n<p>\n    Point Value: <ma-point-value point="myPoint"></ma-point-value>\n</p>\n\n<div layout="row" layout-wrap>\n    <div flex="50">\n        <h3>Map example</h3>\n        <ma-switch-img point="myPoint"\n                       default-src="img/close.png"\n                       src-map="{\'false\': \'img/ligthbulb_off.png\', \'true\': \'img/ligthbulb_on.png\'}">\n        </ma-switch-img>\n    </div>\n    <div flex="50">\n        <h3>Binary example</h3>\n        <ma-switch-img point="myPoint"\n                       src-false="img/ligthbulb_off.png"\n                       src-true="img/ligthbulb_on.png"\n                       default-src="img/close.png">\n        </ma-switch-img>\n    </div>\n    <div flex="50">\n        <h3>Multi-state example</h3>\n        <ma-switch-img point="myPoint"\n                       src-1="img/arrow_up.png"\n                       src-2="img/arrow_right.png"\n                       src-3="img/arrow_down.png"\n                       src-4="img/arrow_left.png"\n                       default-src="img/close.png">\n        </ma-switch-img>\n    </div>\n    <div flex="50">\n        <h3>String example</h3>\n        <ma-switch-img point="myPoint"\n                       src-test="img/ligthbulb_off.png"\n                       src-test-my-string="img/ligthbulb_on.png"\n                       default-src="img/close.png">\n        </ma-switch-img>\n    </div>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3603:function(e,n){e.exports='<h1 ma-tr="ui.dox.bars"></h1>\n\n<p>\n    This examples shows two different ways to create a bar to display the value of a data points.\n    You can use an <a href="https://material.angularjs.org/latest/demo/progressLinear" target="blank">Angular Material\n        Progress Linear</a> directive and pass the value to <code>ng-value</code>, or create your own using CSS and the <code>ng-style</code>\n    directive.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maGetPointValue"><code>&lt;ma-get-point-value&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Select numeric point and max value:</h3>\n<div layout="row">\n    <md-input-container flex="75">\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n    <md-input-container flex="25">\n        <label>Maximum value</label>\n        <input type="number" ng-model="max" ng-init="max=1000">\n    </md-input-container>\n</div>\n<br>\n\n<ma-get-point-value point="myPoint"></ma-get-point-value>\n\n<h3>Angular Material progress linear bar</h3>\n<md-progress-linear md-mode="determinate" ng-value="myPoint.convertedValue / max * 100"\n                    style="height:10px;"></md-progress-linear>\n<br>\n\n<h3>Custom horizontal bar</h3>\n<div class="bar-display" ng-class="{\'point-disabled\': !myPoint.enabled}">\n    <div class="bar-display-fill" ng-style="{width: myPoint.convertedValue / max * 100 + \'%\'}" style=""></div>\n    <div class="bar-display-text">{{myPoint.renderedValue}}</div>\n</div>\n<br>\n\n<h3>Custom vertical bar</h3>\n<div class="bar-display bar-display-vertical" ng-class="{\'point-disabled\': !myPoint.enabled}">\n    <div class="bar-display-fill" ng-style="{height: myPoint.convertedValue / max * 100 + \'%\'}" style=""></div>\n    <div class="bar-display-text">{{myPoint.renderedValue}}</div>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3604:function(e,n){e.exports='<h1 ma-tr="ui.dox.tanks"></h1>\n\n<p>\n    An example of the <code>&lt;ma-tank-level&gt;</code> directive which internally uses SVG to create a custom data visualization.\n</p>\n\n<p>\n    Note you must give the tank a width and height, and you must use a <code>&lt;ma-get-point-value&gt;</code> tag to get the value.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maTankLevel"><code>&lt;ma-tank-level&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <ma-filtering-point-list flex limit="200" ng-model="myPoint" auto-init="true"></ma-filtering-point-list>\n    <ma-filtering-point-list flex limit="200" ng-model="myPoint2" auto-init="true"></ma-filtering-point-list>\n</div>\n\n<div layout="row">\n    <md-input-container flex="50">\n        <label>Maximum value</label>\n        <input type="number" ng-model="max" ng-init="max=100">\n    </md-input-container>\n    <md-input-container flex="50">\n        <label>Tank color</label>\n        <input type="color" ng-model="choosenColor" ng-init="choosenColor=\'#ff4d4d\'">\n    </md-input-container>\n</div>\n\n<ma-get-point-value point="myPoint" display-type="none"></ma-get-point-value>\n<ma-get-point-value point="myPoint2" display-type="none"></ma-get-point-value>\n\n<div style="position:relative; height: 200px">\n\t<ma-tank-level point="myPoint" color="{{choosenColor}}" max="max" style="width:300px; height:200px; position:absolute; top:0; left:0px; z-index:2"></ma-tank-level>\n\t<div class="pipe-left-right" ng-style="{\'background-color\':choosenColor}" style="position:absolute; top:160px; left:180px; width: 250px; z-index: 1"></div>\n\t<ma-tank-level point="myPoint2" color="{{choosenColor}}" max="max" style="width:300px; height:200px; position:absolute; top:0; left:400px; z-index:2"></ma-tank-level>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3605:function(e,n){e.exports='<h1 ma-tr="ui.dox.lineChart"></h1>\n<p>\n    We use <a href="https://docs.amcharts.com/3/javascriptcharts/AmSerialChart">AmCharts</a> in the UI module\n    but have provided an easy to use component to include charts on your pages.\n</p>\n\n<p>\n    With <code>&lt;ma-serial-chart&gt;</code> you can input a point and it\'s values from\n    <a ui-sref="ui.examples.basics.pointValues">&lt;ma-point-values&gt;</a>. You can provide your time range and\n    rollup settings to <code>&lt;ma-point-values&gt;</code> via <a ui-sref="ui.examples.basics.datePresets">Date Pickers</a> on the\n    page or the\n    <a\n    ui-sref="ui.help.dateBar">Date Bar</a>,\n    then pass the value data to <code>&lt;ma-serial-chart&gt;</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maSerialChart"><code>&lt;ma-serial-chart&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="point1"></ma-point-list>\n    </md-input-container>\n</div>\n\n<ma-point-values point="point1" values="point1Values" from="dateBar.from" to="dateBar.to" rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n\n<ma-serial-chart style="height: 300px; width: 100%" series-1-values="point1Values" series-1-point="point1" legend="true"\n                 balloon="true" export="true">\n</ma-serial-chart>\n\n</ma-ui-dual-pane-editor>\n'},3606:function(e,n){e.exports='<h1 ma-tr="ui.dox.barChart"></h1>\n\n<p>\n    The bar chart is the exact same code as the line chart but you set <code>default-type</code> property or a\n    <code>series-x-type</code> property if you have multiple points being graphed.\n</p>\n\n<p>\n    The possible values for chart type are <code>\'line\', \'smoothedLine\', \'column\', or \'step\'</code>. Try updating <code>default-type</code>\n    below to <code>"step"</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maSerialChart"><code>&lt;ma-serial-chart&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n    <div layout="row">\n        <md-input-container flex>\n            <label>Choose a numeric point</label>\n            <ma-point-list limit="200" ng-model="point1"></ma-point-list>\n        </md-input-container>\n    </div>\n\n    <ma-point-values point="point1" values="point1Values"\n                     from="dateBar.from" to="dateBar.to"\n                     rollup="{{dateBar.rollupType}}"\n                     rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n    </ma-point-values>\n\n    <ma-serial-chart style="height: 300px; width: 100%"\n                     series-1-values="point1Values" series-1-point="point1" default-type="column">\n    </ma-serial-chart>\n\n</ma-ui-dual-pane-editor>\n'},3607:function(e,n){e.exports='<h1 ma-tr="ui.dox.advancedChart"></h1>\n\n<p>\n    It is possible to override chart options, titles, colors, types and axes using attributes exposed to <code>&lt;ma-serial-chart&gt;</code>.\n</p>\n\n<p>\n    Use <code>legend="true"</code> to turn on the legend. Use <code>balloon="true"</code> to turn on timestamp and value tooltips\n    on mouse hover.\n</p>\n\n<p>\n    Use <code>series-X-title</code>, <code>series-X-type</code> &amp; <code>series-X-color</code> to change the title, type and\n    color of a series.\n</p>\n\n<p>\n    Use <code>series-X-axis</code> to change the axis ID for a series. The default axis IDs which are available are\n    <code>left</code>, <code>right</code>, <code>left-2</code> &amp; <code>right-2</code> or you can specify your own in <code>\n    options</code>.\n</p>\n\n<p>\n    Use <code>options</code> to set an <a href="https://docs.amcharts.com/3/javascriptcharts/AmSerialChart" target="_blank">AmCharts\n    options</a> for the chart. The options will be merged with the default options. Use caution when dynamically setting options\n    as some values may cause the chart rendering to fail.\n</p>\n\n<p>\n    Rollup Intervals can be applied manually using <code>rollup-interval</code> on <code>&lt;ma-point-values&gt;</code>.\n    Alternatively you can turn on <code>auto-rollup-interval</code> by setting this attribute to <code>true</code> and the rollup\n    interval will be based on the date range and rollup type.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maSerialChart"><code>&lt;ma-serial-chart&gt;</code></a> &amp;\n    <a ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <ma-filtering-point-list flex="50" label="Point 1" ng-model="point1"></ma-filtering-point-list>\n    <ma-filtering-point-list flex="50" label="Point 2" ng-model="point2"></ma-filtering-point-list>\n</div>\n\n<div layout="row">\n    <md-input-container flex="50" ng-init="point1Color=\'#ffaa00\'">\n        <label>Point 1 Color</label>\n        <input type="color" ng-model="point1Color">\n    </md-input-container>\n    <md-input-container flex="50" ng-init="point2Color=\'#0000aa\'">\n        <label>Point 2 Color</label>\n        <input type="color" ng-model="point2Color">\n    </md-input-container>\n</div>\n\n<div layout="row">\n    <md-input-container flex="50" ng-init="point1ChartType=\'line\'">\n        <label>Point 1 Chart Type</label>\n        <md-select ng-model="point1ChartType">\n            <md-option ng-value="t.type" ng-repeat="t in chartTypes">{{t.label}}</md-option>\n        </md-select>\n    </md-input-container>\n    <md-input-container flex="50" ng-init="point2ChartType=\'column\'">\n        <label>Point 2 Chart Type</label>\n        <md-select ng-model="point2ChartType">\n            <md-option ng-value="t.type" ng-repeat="t in chartTypes">{{t.label}}</md-option>\n        </md-select>\n    </md-input-container>\n</div>\n\n<ma-point-values point="point1" values="point1Values" from="dateBar.from" to="dateBar.to" rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n<ma-point-values point="point2" values="point2Values" from="dateBar.from" to="dateBar.to" rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n\n<ma-serial-chart style="height: 300px; width: 100%" series-1-values="point1Values" series-1-point="point1"\n                 series-1-type="{{point1ChartType}}" series-1-color="{{point1Color}}" series-2-values="point2Values"\n                 series-2-point="point2" series-2-type="{{point2ChartType}}"\n                 series-2-color="{{point2Color}}" series-2-axis="right" legend="true" balloon="true"\n                 options="{valueAxes:[{minimum:0, axisColor:point1Color, color:point1Color}, {axisColor:point2Color, color:point2Color}]}">\n</ma-serial-chart>\n\n</ma-ui-dual-pane-editor>'},3608:function(e,n){e.exports='<h1 ma-tr="ui.dox.stateChart"></h1>\n\n<p>\n    This example show how to use <code>&lt;ma-state-chart&gt;</code> to show the proportion of time a multistate or\n    binary data point has been in a particular state.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maStateChart"><code>&lt;ma-state-chart&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row" layout-xs="column">\n    <md-input-container flex>\n        <label>Multi-state point 1</label>\n        <ma-point-list limit="200" ng-model="point1"></ma-point-list>\n    </md-input-container>\n    <md-input-container flex>\n        <label>Multi-state point 2</label>\n        <ma-point-list limit="200" ng-model="point2"></ma-point-list>\n    </md-input-container>\n</div>\n\n<ma-point-values point="point1" values="point1Values" from="dateBar.from" to="dateBar.to"\n                 rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n<ma-point-values point="point2" values="point2Values" from="dateBar.from" to="dateBar.to"\n                 rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n\n<ma-state-chart style="height: 500px; width: 100%"\n                series-1-title="{{point1.name}}" series-1-values="point1Values" series-1-labels="point1.rendererMap()"\n                series-2-title="{{point2.name}}" series-2-values="point2Values" series-2-labels="point2.rendererMap()">\n</ma-state-chart>\n\n</ma-ui-dual-pane-editor>\n'},3609:function(e,n){e.exports='<h1 ma-tr="ui.dox.liveUpdatingChart"></h1>\n\n<p>\n    This example shows how to display a chart that will update with the latest <code>n</code> number of values from a data point.\n    Note the <code>latest</code> attribute on <code>&lt;ma-point-values&gt;</code> that is set to <code>100</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maSerialChart"><code>&lt;ma-serial-chart&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex="75">\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="point1"></ma-point-list>\n    </md-input-container>\n    <md-input-container flex>\n        <label>Values to display</label>\n        <input type="number" min="1" max="1000" ng-model="count" ng-init="count=100">\n    </md-input-container>\n</div>\n\n<ma-point-values point="point1" values="point1Values" latest="count">\n</ma-point-values>\n\n<ma-serial-chart style="height: 300px; width: 100%" series-1-values="point1Values" series-1-point="point1">\n</ma-serial-chart>\n\n</ma-ui-dual-pane-editor>\n'},3610:function(e,n){e.exports='<h1 ma-tr="ui.dox.pieChart"></h1>\n<p>A simple pie chart example showing how to manually build up an array of <code>values</code> and display the results on a pie\n    chart using the <code>&lt;ma-pie-chart&gt;</code> component.\n    For a more advanced example showing a pie chart of data point states and run times please see\n    <a ui-sref="ui.examples.statistics.statePieChart" target="_blank">the example under Statistics</a>.\n</p>\n\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPieChart"><code>&lt;ma-pie-chart&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Add a value</h3>\n<div layout="row" layout-align="start center" ng-init="values=[]">\n    <md-input-container flex="30" ng-init="item.value=10">\n        <label>Value</label>\n        <input ng-model="item.value" type="number" min="0">\n    </md-input-container>\n    <md-input-container flex="30" ng-init="item.text=\'Item 1\'">\n        <label>Text</label>\n        <input ng-model="item.text">\n    </md-input-container>\n    <md-input-container flex="30" ng-init="item.color=\'#ff0000\'">\n        <label>Color</label>\n        <input ng-model="item.color" type="color">\n    </md-input-container>\n    <md-button type="submit" ng-click="values.push(item); item={}" class="md-raised md-accent" flex="10">Add</md-button>\n</div>\n\n<h3>Pie Chart</h3>\n<ma-pie-chart style="height: 300px; width: 600px" values="values" options="{depth3D:15,angle:30}"></ma-pie-chart>\n\n</ma-ui-dual-pane-editor>'},3611:function(e,n){e.exports="<h1 ma-tr=\"ui.dox.dailyComparisonChart\"></h1>\n\n<p>This example shows how to plot a data point for a whole week, splitting each day into a separate series so you can compare the\n    values for each day.\n</p>\n\n<p>\n    The trick is to use multiple <code>&lt;ma-point-values&gt;</code> directives combined with the <a\n    ui-sref=\"ui.examples.basics.filters\">moment filter</a> to get values for each day individually.\n    Each set of daily values is inputted into a <code>series-X-values</code> attribute of of <code>&lt;ma-serial-chart&gt;</code>. Then\n    <code>series-X-title</code> is used to manually set titles for each series and the <code>time-format</code> attribute is\n    used to only show the hourly time on the x-axis.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref=\"ui.docs.ngMango.maSerialChart\"><code>&lt;ma-serial-chart&gt;</code></a>, <a\n    ui-sref=\"ui.docs.ngMango.maPointValues\"><code>&lt;ma-point-values&gt;</code></a>, <a ui-sref=\"ui.docs.ngMango.maNow\"><code>&lt;ma-now&gt;</code></a>\n    and <a ui-sref=\"ui.docs.ngMangoFilters.momentFilter\"><code>momentFilter</code></a> .\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div ng-init=\"page={rollup:'15 minutes', rollupType:'AVERAGE', week:0, values:{}}\"></div>\n\n<div layout=\"row\">\n    <md-input-container flex=\"\">\n        <label>Choose a numeric point</label>\n        <ma-point-list limit=\"200\" ng-model=\"page.point\"></ma-point-list>\n    </md-input-container>\n</div>\n\n<div layout=\"row\">\n    <md-input-container flex>\n        <label>Select a week</label>\n\n        <md-select ng-model=\"page.week\">\n            <md-option ng-value=\"0\">This week</md-option>\n            <md-option ng-value=\"-1\">Last week</md-option>\n        </md-select>\n    </md-input-container>\n</div>\n\n<ma-now update-interval=\"1 HOURS\" output=\"page.now\"></ma-now>\n\n<ma-point-values point=\"page.point\" values=\"page.values.sunday\"\n                 from=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'\"\n                 to=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':1:'day'\"\n                 rollup=\"{{page.rollupType}}\" rollup-interval=\"{{page.rollup}}\">\n</ma-point-values>\n\n<ma-point-values point=\"page.point\" values=\"page.values.monday\"\n                 from=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':1:'day'\"\n                 to=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':2:'day'\"\n                 rollup=\"{{page.rollupType}}\" rollup-interval=\"{{page.rollup}}\">\n</ma-point-values>\n\n<ma-point-values point=\"page.point\" values=\"page.values.tuesday\"\n                 from=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':2:'day'\"\n                 to=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':3:'day'\"\n                 rollup=\"{{page.rollupType}}\" rollup-interval=\"{{page.rollup}}\">\n</ma-point-values>\n\n<ma-point-values point=\"page.point\" values=\"page.values.wednesday\"\n                 from=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':3:'day'\"\n                 to=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':4:'day'\"\n                 rollup=\"{{page.rollupType}}\" rollup-interval=\"{{page.rollup}}\">\n</ma-point-values>\n\n<ma-point-values point=\"page.point\" values=\"page.values.thursday\"\n                 from=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':4:'day'\"\n                 to=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':5:'day'\"\n                 rollup=\"{{page.rollupType}}\" rollup-interval=\"{{page.rollup}}\">\n</ma-point-values>\n\n<ma-point-values point=\"page.point\" values=\"page.values.friday\"\n                 from=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':5:'day'\"\n                 to=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':6:'day'\"\n                 rollup=\"{{page.rollupType}}\" rollup-interval=\"{{page.rollup}}\">\n</ma-point-values>\n\n<ma-point-values point=\"page.point\" values=\"page.values.saturday\"\n                 from=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':6:'day'\"\n                 to=\"page.now|maMoment:'startOf':'week'|maMoment:'add':page.week:'weeks'|maMoment:'add':7:'day'\"\n                 rollup=\"{{page.rollupType}}\" rollup-interval=\"{{page.rollup}}\">\n</ma-point-values>\n\n<ma-serial-chart style=\"height: 600px; width: 100%\"\n                 series-1-values=\"page.values.sunday\" series-1-title=\"Sunday\"\n                 series-2-values=\"page.values.monday\" series-2-title=\"Monday\"\n                 series-3-values=\"page.values.tuesday\" series-3-title=\"Tuesday\"\n                 series-4-values=\"page.values.wednesday\" series-4-title=\"Wednesday\"\n                 series-5-values=\"page.values.thursday\" series-5-title=\"Thursday\"\n                 series-6-values=\"page.values.friday\" series-6-title=\"Friday\"\n                 series-7-values=\"page.values.saturday\" series-7-title=\"Saturday\"\n                 time-format=\"LTS\" legend=\"true\" balloon=\"true\"\n                 options=\"{categoryAxis:{labelRotation:45}}\">\n</ma-serial-chart>\n\n</ma-ui-dual-pane-editor>\n"},3612:function(e,n){e.exports='<h1 ma-tr="ui.dox.input"></h1>\n\n<p>\n    The <code>&lt;ma-set-point-value&gt;</code> directive will create a form input element to set\n    the value of a point. It can handle numeric, alphanumeric, binary, and multistate point types and will create\n    an appropriate interface element for each point type.\n</p>\n\n<p>\n    Alternatively you can set the value of a point by calling the <code>setValue</code> method on a point.\n    This function can be called from within a <code>ng-click</code> expression for example.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maSetPointValue"><code>&lt;ma-set-point-value&gt;</code></a>\n    and <code>setValue()</code> method on the <a\n    ui-sref="ui.docs.ngMangoServices.maPoint"><code>Point</code></a> object.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Choose a settable data point:</h3>\n<md-input-container>\n    <label>Choose a point</label>\n    <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n</md-input-container>\n\n<ma-get-point-value point="myPoint"></ma-get-point-value>\n\n<h3>Using &lt;ma-set-point-value&gt;</h3>\n<ma-set-point-value point="myPoint"></ma-set-point-value>\n<br>\n\n<h3>Via setValue() method triggered by button click</h3>\n<md-button ng-click="myPoint.setValue(5)" class="md-raised">Set to 5</md-button>\n\n</ma-ui-dual-pane-editor>'},3613:function(e,n){e.exports='<h1 ma-tr="ui.dox.toggle"></h1>\n\n<p>\n    Binary data points can be set using various methods, some of which are shown below.\n    The <code>toggleValue()</code> method can be used on a point, which works great via\n    a <code>ng-click</code> on a <code>&lt;ma-switch-img&gt;</code> component.\n</p>\n\n<p>\n    HTML checkbox and angular material switch components can be used as well.\n    Set the <code>ng-model</code> to the points <code>valueFn</code> property and\n    set <code ng-nonbinding>ng-model-options="{getterSetter:true}"</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maSwitchImg"><code>&lt;ma-switch-img&gt;</code></a>\n    and <code>valueFn</code> / <code>toggleValue()</code> methods on the <a\n    ui-sref="ui.docs.ngMangoServices.maPoint"><code>Point</code></a> object.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="column">\n    <h3>Select a settable binary point:</h3>\n    <md-input-container>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n    <p>\n        <strong>Point value:</strong>\n        {{myPoint.value}},\n\n        <strong>Rendered point value:</strong>\n        <ma-point-value point="myPoint"></ma-point-value>\n    </p>\n    <br>\n\n    <h3>Toggle via image:</h3>\n    <ma-switch-img point="myPoint" ng-click="myPoint.toggleValue()"\n                   src-false="img/ligthbulb_off.png"\n                   src-true="img/ligthbulb_on.png"\n                   default-src="img/close.png">\n    </ma-switch-img>\n    <br>\n\n    <h3>Toggle via switch:</h3>\n    <md-switch ng-model="myPoint.valueFn" ng-model-options="{getterSetter:true}">\n        Point value: {{ myPoint.value }}\n    </md-switch>\n    <br>\n\n    <h3>Toggle via checkbox:</h3>\n    <md-checkbox ng-model="myPoint.valueFn" ng-model-options="{getterSetter:true}">\n        Point value: {{ myPoint.value }}\n    </md-checkbox>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3614:function(e,n){e.exports='<h1 ma-tr="ui.dox.sliders"></h1>\n\n<p>\n    Angular material <a href="https://material.angularjs.org/latest/demo/slider" target="_blank">slider</a> components can be\n    used to set a data point\'s value using a drag and drop slider widget.\n    Set the <code>ng-model</code> to the points <code>valueFn</code> property and\n    set <code ng-nonbinding>ng-model-options="{getterSetter:true}"</code> on the <code>&lt;md-slider&gt;</code> element.\n</p>\n\n<p>\n    See API Documentation for the <code>valueFn</code>\n    method on the <a ui-sref="ui.docs.ngMangoServices.maPoint"><code>Point</code></a> object.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="column">\n    <md-input-container>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n\n    <ma-point-value point="myPoint"></ma-point-value>\n\n    <md-slider ng-disabled="!myPoint.enabled" md-discrete step="1" min="0" max="100" ng-model="myPoint.valueFn"\n               ng-model-options="{getterSetter:true}">\n    </md-slider>\n</div>\n\n<md-slider-container ng-disabled="!myPoint.enabled">\n    <md-input-container>\n        <input flex step="1" min="0" max="100" type="number" ng-model="myPoint.valueFn"\n               ng-model-options="{getterSetter:true}">\n    </md-input-container>\n    <md-slider step="1" min="0" max="100" md-discrete ng-model="myPoint.valueFn" ng-model-options="{getterSetter:true}"\n               md-vertical></md-slider>\n    <h5>Value</h5>\n</md-slider-container>\n\n</ma-ui-dual-pane-editor>\n'},3615:function(e,n){e.exports='<h1 ma-tr="ui.dox.multistateRadio"></h1>\n\n<p>\n    This example showcases using angular material <a href="https://material.angularjs.org/latest/demo/radioButton" target="_blank">\n    radio buttons</a> to set the value of multistate data points. Set the <code>ng-model</code> to the points\n    <code>valueFn</code> property and set <code ng-nonbinding>ng-model-options="{getterSetter:true}"</code>.\n</p>\n\n<p>\n    The first example shows how to loop through the text renderer map of the multistate point to get the various\n    options set on the data point properties. The second example shows how to use fixed values of 0-5.\n</p>\n\n<p>\n    See API Documentation for the <code>valueFn</code> and <code>rendererMap</code> methods on the\n    <a ui-sref="ui.docs.ngMangoServices.maPoint"><code>Point</code></a> object.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Select multi-state point:</h3>\n<md-input-container>\n    <label>Choose a point</label>\n    <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n</md-input-container>\n\n<p>\n    <strong>Point value:</strong>\n    <ma-point-value point="myPoint"></ma-point-value>\n</p>\n<br>\n\n<h3>Using multistate text renderer to get options and range</h3>\n<md-radio-group ng-model="myPoint.valueFn" ng-model-options="{getterSetter:true}">\n    <md-radio-button ng-repeat="value in myPoint.rendererMap()" ng-value="value.key" ng-style="value">{{value.text}}\n    </md-radio-button>\n</md-radio-group>\n<br>\n\n<h3>Using fixed values to set options and range</h3>\n<md-radio-group ng-model="myPoint.valueFn" ng-model-options="{getterSetter:true}">\n    <md-radio-button ng-repeat="i in range(0,5)" value="{{i}}" ng-style="myPoint.valueRenderer(i)">\n        {{myPoint.valueRenderer(i).text}}\n    </md-radio-button>\n</md-radio-group>\n\n</ma-ui-dual-pane-editor>\n'},3616:function(e,n){e.exports='<h1 ma-tr="ui.dox.getStatistics"></h1>\n\n<p>\n    The <code>&lt;ma-point-statistics&gt;</code> directive provides access to historical stats over a time range on a data point.\n</p>\n\n<p>\n    The object returned by the <code>statistics</code> attribute contains <code>first, last, minimum, maximum, average, integral,\n    sum, &amp; count</code> properties. Each of these will have a <code>value</code> and a <code>timestamp</code>.\n</p>\n\n<p>\n    If you are interested only in the change in a value between two times you can add the optional <code>first-last="true"</code>\n    attribute to only return the first and last values as an array, then calculate the difference with\n    <code  ng-non-bindable>{{  statsObj[1].value - statsObj[0].value }}</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointStatistics"><code>&lt;ma-point-statistics&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n</div>\n\n<ma-point-statistics point="myPoint" from="dateBar.from" to="dateBar.to" statistics="statsObj"></ma-point-statistics>\n\n<p>\n    The average for the period is {{ statsObj.average.value }} at {{ statsObj.average.timestamp | maMoment:\'format\':\'lll\'\n    }}\n\n    <br>\n\n    The max value for the period is {{ statsObj.maximum.value }} at {{ statsObj.maximum.timestamp | maMoment:\'format\':\'lll\' }}\n</p>\n\n</ma-ui-dual-pane-editor>\n'},3617:function(e,n){e.exports='<h1 ma-tr="ui.dox.statisticsTable"></h1>\n<p><code>&lt;ma-statistics-table&gt;</code> is a component that will display a nicely formatted table with the values and timestamps\n    from the <code>statsObj</code>.</p>\n\n<p>\nSee API Documentation for <a ui-sref="ui.docs.ngMango.maPointStatistics"><code>&lt;ma-point-statistics&gt;</code></a> and <a ui-sref="ui.docs.ngMango.maStatisticsTable"><code>&lt;ma-statistics-table&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n</div>\n\n<ma-point-statistics point="myPoint" from="dateBar.from" to="dateBar.to" statistics="statsObj"></ma-point-statistics>\n\n<ma-statistics-table statistics="statsObj"></ma-statistics-table>\n\n</ma-ui-dual-pane-editor>\n'},3618:function(e,n){e.exports='<h1 ma-tr="ui.dox.statePieChart"></h1>\n\n<p>\n    This example shows how to combine <code>&lt;ma-point-statistics&gt;</code> with <code>&lt;ma-pie-chart&gt;</code> on a multistate data\n    point to produce a chart showing proportion of time in each state.\n</p>\n\n<p>\n    To show a pie chart of arbitrary values, see the <a ui-sref="ui.examples.charts.pieChart">basic pie chart</a> example.</p>\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointStatistics"><code>&lt;ma-point-statistics&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maPieChart"><code>&lt;ma-pie-chart&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Select a multistate data point:</h3>\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a point</label>\n        <ma-point-list limit="200" ng-model="myPoint"></ma-point-list>\n    </md-input-container>\n</div>\n\n\n<ma-point-statistics point="myPoint" from="dateBar.from" to="dateBar.to" statistics="statsObj"></ma-point-statistics>\n\n<ma-pie-chart style="height: 300px; width: 600px" values="statsObj.startsAndRuntimes" value-labels="myPoint.rendererMap()"\n              options="{depth3D:15,angle:30}"></ma-pie-chart>\n\n</ma-ui-dual-pane-editor>\n'},3619:function(e,n){e.exports='<h1 ma-tr="ui.dox.buildPointArray"></h1>\n\n<p>\n    This is a more advanced example showing how to use angular material <a href="https://material.angularjs.org/latest/demo/chips"\n    target="_blank"> chips</a> combined with <code>&lt;ma-point-list&gt;</code> to create an editable array of points.</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointList"><code>&lt;ma-point-list&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row" ng-init="points=[]">\n    <md-input-container flex>\n        <label>Add a point</label>\n        <ma-point-list limit="200" ng-model="point" init-point="false"\n                       ng-change="point && points.push(point); point=null"></ma-point-list>\n    </md-input-container>\n</div>\n\n<md-chips ng-model="points" name="name" readonly="true" md-max-chips="10">\n    <md-chip-template ng-click="points.splice($$replacedScope.$index,1)">\n        <strong>{{$chip.name}}</strong>\n        <em>({{$chip.deviceName}})</em>\n        <md-icon>close</md-icon>\n    </md-chip-template>\n</md-chips>\n\n</ma-ui-dual-pane-editor>\n'},3620:function(e,n){e.exports='<h1 ma-tr="ui.dox.pointArrayTable"></h1>\n\n<p>\n    This is another more advanced example. The key component to pay attention to is\n    <code>&lt;ma-point-query&gt;</code> directive. This directive allows you to do server-side\n    searching and filtering for points in your system. The <code>limit</code> attribute allows you to\n    limit the number of points returned.\n</p>\n\n<p>\n    The list of <code>points</code> outputted from <code>&lt;ma-point-query&gt;</code> is inputted into <code>&lt;ma-point-values&gt;</code> -\n    <code>points</code> property (note plural points property takes an array of points). The combined values are then looped over in\n    the table with columns giving to each data point.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointQuery"><code>&lt;ma-point-query&gt;</code></a> and <a\n    ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex="50">\n        <label>Device name</label>\n        <input ng-init="dvName=\'\'" ng-model="dvName" ng-model-options="{debounce:1000}">\n    </md-input-container>\n    <md-input-container flex="50">\n        <label>Point name</label>\n        <input ng-init="ptName=\'\'" ng-model="ptName" ng-model-options="{debounce:1000}">\n    </md-input-container>\n</div>\n\n<ma-point-query query="{$and: true, deviceName:dvName, name:ptName}" limit="5" points="points"></ma-point-query>\n\n<ma-point-values points="points" values="combined" from="dateBar.from" to="dateBar.to" rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n\n<p>\n    <em>Only the first 5 points matching points are shown.</em>\n</p>\n\n<md-table-container ng-init="tableOrder=\'timestamp\'">\n    <table md-table>\n        <thead md-head md-order="tableOrder">\n            <tr>\n                <th md-column md-order-by="timestamp">Time</th>\n                <th md-column md-order-by="value_{{point.xid}}" ng-repeat="point in points">{{point.name}}</th>\n            </tr>\n        </thead>\n        <tbody md-body>\n            <tr ng-repeat="value in combined | orderBy: tableOrder">\n                <td>{{value.timestamp | maMoment:\'format\':\'ll LTS\'}}</td>\n                <td ng-repeat="point in points">{{value[\'value_\' + point.xid]}}</td>\n            </tr>\n        </tbody>\n    </table>\n</md-table-container>\n\n</ma-ui-dual-pane-editor>\n'},3621:function(e,n){e.exports='<h1 ma-tr="ui.dox.pointArrayLineChart"></h1>\n\n<p>\n    This is another more advanced example using the <code>&lt;ma-point-query&gt;</code> directive.\n    The list of <code>points</code> outputted from <code>&lt;ma-point-query&gt;</code> is inputted into <code>&lt;ma-point-values&gt;</code> -\n    <code>points</code> property (note plural points property takes an array of points). The combined values are then passed to\n    <code>&lt;ma-serial-chart&gt;</code>.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointQuery"><code>&lt;ma-point-query&gt;</code></a>,\n    <a ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>\n    and <a ui-sref="ui.docs.ngMango.maSerialChart"><code>&lt;ma-serial-chart&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex="50">\n        <label>Device name</label>\n        <input ng-model="dvName" ng-model-options="{debounce:1000}">\n    </md-input-container>\n    <md-input-container flex="50">\n        <label>Point name</label>\n        <input ng-model="ptName" ng-model-options="{debounce:1000}">\n    </md-input-container>\n</div>\n\n<ma-point-query query="{$and: true, deviceName:dvName, name:ptName}" limit="5" points="points"></ma-point-query>\n\n<ma-point-values points="points" values="combined" from="dateBar.from" to="dateBar.to" rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n</ma-point-values>\n\n<p>\n    <em>Only the first 5 points matching points are shown.</em>\n</p>\n\n<ma-serial-chart style="height: 300px; width: 100%" values="combined" points="points" legend="true">\n</ma-serial-chart>\n\n</ma-ui-dual-pane-editor>\n'},3622:function(e,n){e.exports='<h1 ma-tr="ui.dox.templating"></h1>\n\n<p>\n    This example uses some hard-coded device and points names. You will need to <a\n    ui-sref="ui.settings.importExport">import</a> the example virtual data sources <a\n    href="/modules/mangoUI/web/configs/demoMangoConfig.json" target="_blank">from this JSON file</a> for it to work.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointQuery"><code>&lt;ma-point-query&gt;</code></a>,\n    <a ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>,\n    <a ui-sref="ui.docs.ngMango.maSerialChart"><code>&lt;ma-serial-chart&gt;</code></a>,\n    <a ui-sref="ui.docs.ngMango.maGaugeChart"><code>&lt;ma-gauge-chart&gt;</code></a>\n    and <a ui-sref="ui.docs.ngMango.maCalc"><code>&lt;ma-calc&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a device</label>\n        <md-select ng-model="deviceName" ng-init="deviceName=\'Meter 1\'">\n            <md-option ng-value="\'Meter 1\'">Meter 1</md-option>\n            <md-option ng-value="\'Meter 2\'">Meter 2</md-option>\n            <md-option ng-value="\'Meter 3\'">Meter 3</md-option>\n        </md-select>\n    </md-input-container>\n</div>\n\n\x3c!-- Server side query for points with given device name, and server side sort --\x3e\n<ma-point-query query="{deviceName:deviceName}" sort="\'name\'" points="points"></ma-point-query>\n<ma-get-point-value points="points"></ma-get-point-value>\n\n\x3c!-- Client side filter by name --\x3e\n<ma-calc input="points | filter:{name:\'Energy Accumulator (kWh)\'} | maFirst" output="energy"></ma-calc>\n<ma-calc input="points | filter:{name:\'Current Phase \' + phase + \' (A)\'} | maFirst" output="current"></ma-calc>\n<ma-calc input="points | filter:{name:\'Voltage \' + phase + \'-N (V)\'} | maFirst" output="voltage"></ma-calc>\n<ma-calc input="points | filter:{name:\'Real Power \' + phase + \' (kW)\'} | maFirst" output="power"></ma-calc>\n<ma-calc input="points | filter:{name:\'Power Factor \' + phase + \'\'} | maFirst" output="powerFactor"></ma-calc>\n\n<h3>Details for {{deviceName}}</h3>\n<p>\n    There are {{points.length}} points for {{deviceName}}.\n</p>\n<br>\n\n<h3>Gauges</h3>\n\n<div layout="row">\n    <md-input-container flex>\n        <label>Choose a phase</label>\n        <md-select ng-model="phase" ng-init="phase=\'A\'">\n            <md-option ng-value="\'A\'">Phase A</md-option>\n            <md-option ng-value="\'B\'">Phase B</md-option>\n            <md-option ng-value="\'C\'">Phase C</md-option>\n        </md-select>\n    </md-input-container>\n</div>\n\n<div layout="row" layout-wrap>\n    <div flex="50" layout="column" layout-align="center center">\n        <strong>Current</strong>\n        <ma-gauge-chart point="current" start="0"\n                        band-1-end="100" band-1-color="green"\n                        band-2-end="150" band-2-color="yellow"\n                        band-3-end="300" band-3-color="red"\n                        style="width:100%; height:200px"></ma-gauge-chart>\n    </div>\n    <div flex="50" layout="column" layout-align="center center">\n        <strong>Voltage</strong>\n        <ma-gauge-chart point="voltage" start="0"\n                        band-1-end="180" band-1-color="red"\n                        band-2-end="250" band-2-color="yellow"\n                        band-3-end="300" band-3-color="green"\n                        style="width:100%; height:200px"></ma-gauge-chart>\n    </div>\n    <div flex="50" layout="column" layout-align="center center">\n        <strong>Power</strong>\n        <ma-gauge-chart point="power" start="0"\n                        band-1-end="100" band-1-color="green"\n                        band-2-end="150" band-2-color="yellow"\n                        band-3-end="200" band-3-color="red"\n                        style="width:100%; height:200px"></ma-gauge-chart>\n    </div>\n    <div flex="50" layout="column" layout-align="center center">\n        <strong>Power Factor</strong>\n        <ma-gauge-chart point="powerFactor" start="0"\n                        band-1-end="0.3" band-1-color="red"\n                        band-2-end="0.8" band-2-color="yellow"\n                        band-3-end="1" band-3-color="green"\n                        style="width:100%; height:200px"></ma-gauge-chart>\n    </div>\n</div>\n<br>\n\n<ma-point-values point="energy" values="energyValues" from="dateBar.from" to="dateBar.to"\n                 rollup="{{dateBar.rollupType}}"\n                 rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}"\n></ma-point-values>\n\n<h3>Energy</h3>\n<ma-serial-chart series-1-point="energy" series-1-values="energyValues" series-1-type="column"\n                 style="height:200px; width:100%">\n</ma-serial-chart>\n<br>\n\n<h3>All points for device:</h3>\n<div ng-repeat="pt in points">\n    <label>{{pt.name}}: </label> {{pt.renderedValue}}\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3623:function(e,n){e.exports='<h1 ma-tr="ui.dox.dataPointTable"></h1>\n\n<p>\n    This example integrates <code>&lt;ma-point-query&gt;</code> with the <a href="https://github.com/daniel-nagy/md-data-table"\n                                                                            target="_blank">md-data-table</a>\n    plugin. It supports sorting by name, a search bar for filtering, pagination, and the ability to select\n    points from the data table.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointQuery"><code>&lt;ma-point-query&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<style>\n    md-toolbar.md-table-toolbar form > input:focus {\n        outline: none;\n    }\n\n    md-toolbar.md-table-toolbar form > input {\n        width: 100%;\n        margin-left: 16px;\n        border: none;\n    }\n\n    md-toolbar.ng-animate {\n        transition: none;\n    }\n\n    md-toolbar.md-table-toolbar em {\n        font-size: 1.6rem;\n    }\n</style>\n\n<div ng-init="query={limit:10, page:1, order:\'name\', filter:\'\'}; page.showSearch=false; page.selected=[];"></div>\n\n<ma-point-query query="{name:query.filter, deviceName:query.filter}" limit="query.limit" start="(query.page-1)*query.limit"\n                sort="query.order" points="points" promise="promise"></ma-point-query>\n\n<md-toolbar class="md-table-toolbar md-default" ng-hide="page.showSearch">\n    <div class="md-toolbar-tools">\n        <h2 class="md-title">Data Points</h2>\n        <div flex></div>\n        <div ng-show="page.selected.length">\n            <em>{{page.selected.length}} {{page.selected.length &gt; 1 ? \'items\' : \'item\'}} selected</em>\n            <md-button class="md-icon-button" ng-click="page.selected=[]">\n                <md-icon>clear</md-icon>\n            </md-button>\n        </div>\n        <div flex></div>\n        <md-button class="md-icon-button" ng-click="page.showSearch=true">\n            <md-icon>search</md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n<md-toolbar class="md-table-toolbar md-default" ng-show="page.showSearch">\n    <div class="md-toolbar-tools">\n        <md-icon>search</md-icon>\n        <form flex name="filter.form">\n            <input type="text" ng-model="query.filter" ng-model-options="{debounce:1000}" placeholder="search">\n        </form>\n        <md-button class="md-icon-button" ng-click="query.filter=\'\';page.showSearch=false">\n            <md-icon>close</md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n<md-table-container>\n    <table md-table md-row-select multiple ng-model="page.selected" md-progress="promise">\n        <thead md-head md-order="query.order">\n        <tr md-row>\n            <th md-column md-order-by="deviceName">Device name</th>\n            <th md-column md-order-by="name">Point name</th>\n            <th md-column md-order-by="xid">XID</th>\n        </tr>\n        </thead>\n        <tbody md-body>\n        <tr md-row md-select="point" md-select-id="id" md-auto-select ng-repeat="point in points">\n            <td md-cell>{{point.deviceName}}</td>\n            <td md-cell>{{point.name}}</td>\n            <td md-cell>{{point.xid}}</td>\n        </tr>\n        </tbody>\n    </table>\n</md-table-container>\n\n<md-table-pagination md-limit="query.limit" md-limit-options="[5, 10, 20]" md-page="query.page" md-total="{{points.$total}}"\n                     md-page-select></md-table-pagination>\n\n</ma-ui-dual-pane-editor>\n'},3624:function(e,n){e.exports='<h1 ma-tr="ui.dox.displayTree"></h1>\n\n<p>\n    This example uses <code>&lt;ma-point-hierarchy&gt;</code> to query the point hierarchy. The custom\n    code below creates a interactive tree view of the hierarchy.\n</p>\n\n<p>\n    Check the box to expand the tree, then click the label to send the points to the table.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointHierarchy"><code>&lt;ma-point-hierarchy&gt;</code></a>.\n    See Angular documentation for <a href="https://docs.angularjs.org/api/ng/directive/script"\n                                     target="_blank"><code>ng-template</code></a>.\n</p>\n<ma-ui-dual-pane-editor>\n\n<style>\n    .hide-bullets li {\n        list-style: none;\n    }\n</style>\n\n<script type="text/ng-template" id="folder.html">\n    <md-checkbox ng-model="folder.show"></md-checkbox>\n    <span ng-click="page.points=folder.points">\n        {{folder.name}} - <em>{{folder.points.length}} points</em>\n    </span>\n    <ul ng-if="folder.show && !folder.subfolders.length">\n        <li style="margin-bottom: 16px">\n            <em>No sub-folders</em>\n        </li>\n    </ul>\n    <ul ng-if="folder.show && folder.subfolders.length">\n        <li ng-repeat="folder in folder.subfolders" ng-include="\'folder.html\'"></li>\n    </ul>\n<\/script>\n\n<ma-point-hierarchy path="[]" hierarchy="folder" points></ma-point-hierarchy>\n\n<div ng-init="page={}"></div>\n\n<h3>Point hierarchy tree</h3>\n<div class="hide-bullets" ng-include="\'folder.html\'"></div>\n<br>\n\n<h3>Points table</h3>\n<md-table-container ng-init="page.tableOrder=\'name\'">\n    <table md-table>\n        <thead md-head md-order="page.tableOrder">\n        <tr>\n            <th md-column md-order-by="deviceName">Device name</th>\n            <th md-column md-order-by="name">Point name</th>\n            <th md-column md-order-by="xid">XID</th>\n        </tr>\n        </thead>\n        <tbody md-body>\n        <tr ng-repeat="point in page.points | orderBy: page.tableOrder">\n            <td md-cell>{{point.deviceName}}</td>\n            <td md-cell>{{point.name}}</td>\n            <td md-cell>{{point.xid}}</td>\n        </tr>\n        </tbody>\n    </table>\n</md-table-container>\n\n</ma-ui-dual-pane-editor>\n'},3625:function(e,n){e.exports='<h1 ma-tr="ui.dox.pointHierarchyLineChart"></h1>\n\n<p>\n    <code>&lt;ma-point-hierarchy&gt;</code> accepts an array of strings into its <code>path</code> attribute. You can pass\n    plain strings into this array or, use <code>*</code> as a wildcard for all sub-folders, or separate multiple folders by\n    a <code>|</code> character. Note, you will need to <a\n    ui-sref="ui.settings.importExport">import</a> the example virtual data sources <a\n    href="/modules/mangoUI/web/configs/demoMangoConfig.json" target="_blank">from this JSON file</a> for it to work.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maPointHierarchy"><code>&lt;ma-point-hierarchy&gt;</code></a>,\n    <a ui-sref="ui.docs.ngMango.maPointValues"><code>&lt;ma-point-values&gt;</code></a>\n    and <a ui-sref="ui.docs.ngMango.maSerialChart"><code>&lt;ma-serial-chart&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<h3>Build path</h3>\n<div layout="row" ng-init="segments=[\'Demo\', \'*\', \'Meter 1|Meter 2\']">\n    <md-input-container flex>\n        <label>Choose subfolder</label>\n        <md-select ng-model="segment">\n            <md-option ng-value="f.name" ng-repeat="f in hierarchy.subfolders">{{f.name}}</md-option>\n        </md-select>\n    </md-input-container>\n    <md-input-container flex>\n        <label>Enter manually</label>\n        <input type="text" ng-model="segment">\n    </md-input-container>\n    <md-button ng-click="segments.push(segment); segment=\'\'">Add</md-button>\n</div>\n\n<h3>Your path</h3>\n<div>\n    <span ng-repeat="segment in segments track by $index" ng-click="segments.splice($index, 1)">\n        <strong>{{segment}}</strong><span ng-if="!$last"> &gt; </span>\n    </span>\n    <em ng-if="!segments.length" md-colors="{color:\'warn\'}">Path is empty, add a segment above.</em>\n</div>\n\n<div ng-if="segments.length">\n    <em>Click segment to remove.</em>\n</div>\n\n<div>\n    <strong ng-if="!hierarchy" md-colors="{color:\'warn\'}">Folder not found.</strong>\n    <span ng-if="hierarchy">There are {{points.length}} points under your selected path.</span>\n</div>\n<br>\n\n<ma-point-hierarchy path="segments" hierarchy="hierarchy" points="points"></ma-point-hierarchy>\n\n<h3>Chart</h3>\n<div ng-if="hierarchy">\n    <em ng-if="points.length > 20" md-colors="{color:\'warn\'}">Chart will only show for 20 points or less.</em>\n\n    <div ng-if="points.length <= 20">\n        <ma-point-values points="points" values="combined" from="dateBar.from" to="dateBar.to" rollup="{{dateBar.rollupType}}"\n                         rollup-interval="{{dateBar.rollupIntervals}} {{dateBar.rollupIntervalPeriod}}">\n        </ma-point-values>\n\n        <ma-serial-chart style="height: 500px; width: 100%" values="combined" points="points" legend="true">\n        </ma-serial-chart>\n    </div>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3626:function(e,n,t){e.exports='<h1>Adaptive Layouts</h1>\n\n<p>\n    We have added several example layouts that demonstrate the power of Angular Material\'s\n    <a href="https://material.angularjs.org/latest/layout/introduction" target="_blank">Adaptive Layout</a> API.\n    With no need for complex CSS or media queries, and using just simple HTML attributes, you can create advanced flexbox layouts.\n    There are many features to Angular Material\'s layout system including flex attributes, page size breakpoints, layout\n    row/column, and layout  wrapping. It is worth visiting the official <a\n    href="https://material.angularjs.org/latest/layout/introduction" target="_blank">documentation</a> to get the full benefit\n    of having this powerful layout system available in your Mango pages.\n</p>\n\n<p>\n    You can use these as starting points for a creating an adaptive and responsive layout within your pages. Click <code>New\n    Page From Layout</code> to create a new page using the layout shown. You can then add in <code>Mango UI Components</code> to pull in and\n    display data.\n</p>\n\n\n<div flex layout="row" layout-align="space-between" layout-fill layout-wrap>\n    \n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3501)+'" alt="Three Card A Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/threeCardA.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3502)+'" alt="Three Card B Layout">\n        <md-card-actions layout="row" layout-align="end center">\n           <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/threeCardB.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3503)+'" alt="Four Card C Layout">\n        <md-card-actions layout="row" layout-align="end center">\n           <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fourCardC.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    \n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3504)+'" alt="Four Card A Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fourCardA.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3505)+'" alt="Four Card B Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fourCardB.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3506)+'" alt="Nine Card Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/nineSquare.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    \n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3507)+'" alt="Four Square Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fourSquare.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3508)+'" alt="Four Top Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fourTop.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3509)+'" alt="Five Card A Layout">\n        <md-card-actions layout="row" layout-align="end center">\n         <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fiveCardA.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    \n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3510)+'" alt="Five Card B Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fiveCardB.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3511)+'" alt="Five Card C Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fiveCardC.html\'})" class="md-button">New Page From Layout</a>\n    </md-card>\n    <md-card flex="30" flex-xs="100">\n        <img src="'+t(3512)+'" alt="Five Card D Layout">\n        <md-card-actions layout="row" layout-align="end center">\n          <a ui-sref="ui.settings.editPages({templateUrl: \'views/examples/layouts/fiveCardD.html\'})" class="md-button">New Page From Layout</a>\n        </md-card-actions>\n    </md-card>\n</div>'},3627:function(e,n){e.exports='<h1 ma-tr="ui.dox.translation"></h1>\n\n<p>\n    Add a <code>ma-tr</code> attribute to any HTML element to replace its contents with the translation.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maTr"><code>ma-tr</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<p>\n    The translation for <code>header.title</code> is <em ma-tr="header.title"></em>\n</p>\n\n<p>\n    The translation for <code>common.user.userDisabled</code>, using a single argument, is\n    <em ma-tr="common.user.userDisabled" ma-tr-args="[\'joebloggs\']"></em>\n</p>\n\n<p>\n    The translation for <code>validate.between</code>, using 2 arguments, is\n    <em ma-tr="validate.between" ma-tr-args="[0, 100]"></em>\n</p>\n\n</ma-ui-dual-pane-editor>\n'},3628:function(e,n){e.exports='<h1 ma-tr="ui.dox.jsonStore"></h1>\n\n<p>\n    You can store arbitrary data in Mango\'s JSON store. You can use this functionality in combination with a config page to create\n    your own setup variables for your dashboard or store text that the end user can easily update via your interface. Updates\n    to the JSON store will sync real time with your dashboard, no refresh needed.</p>\n<p>\n    You can set unique values for <code>xid</code> and <code>item</code> attributes to store multiple objects in the JSON store.\n    Any data you want to store should be passed to the value object and can be retrieved using <code ng-non-bindable>{{myItem\n    .jsonData.myProperty}}</code>.\n</p>\n\n<p>\n    Note that if you do not set <code>myItem.editPermission</code> / <code>myItem.readPermission</code> permission of the item,\n    only the Admin will have access to it. You can set these permissions to <code>\'user\'</code> to allow other users to read or\n    edit data in the JSON store. The <code>\'user\'</code> permissions group is added to new Mango users by default.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maJsonStore"><code>&lt;ma-json-store&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<ma-json-store xid="test" item="myItem" value="myValue"></ma-json-store>\n\n<h3>Fill out this form and click save to store it in the json store:</h3>\n<div layout="column">\n    <md-input-container class="md-block">\n        <label>Name</label>\n        <input ng-model="myValue.name">\n    </md-input-container>\n    <md-input-container class="md-block">\n        <label>Phone number</label>\n        <input ng-model="myValue.phone">\n    </md-input-container>\n    <md-input-container class="md-block">\n        <label>Address</label>\n        <textarea ng-model="myValue.address" rows="3"></textarea>\n    </md-input-container>\n    <md-input-container class="md-block">\n        <label>Edit permission</label>\n        <input ng-model="myItem.editPermission">\n    </md-input-container>\n    <md-input-container class="md-block">\n        <label>Read permission</label>\n        <input ng-model="myItem.readPermission">\n    </md-input-container>\n</div>\n<div layout>\n    <md-button class="md-raised md-primary md-hue-3" ng-click="myItem.$save()" flex>\n        <md-icon>save</md-icon>\n        Save\n    </md-button>\n    <md-button class="md-raised md-warn" ng-click="myItem.$delete()" flex>\n        <md-icon>delete</md-icon>\n        Delete\n    </md-button>\n    <md-button class="md-raised" ng-click="myItem.$get()" flex>\n        <md-icon>undo</md-icon>\n        Revert\n    </md-button>\n</div>\n\n<div style="margin-top:10px">\n    <span>Your stored object contains {{myItem.jsonData.name}} {{myItem.jsonData.phone}} {{myItem.jsonData.address}}</span>\n    <pre><code>{{myItem | json}}</code></pre>\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3629:function(e,n){e.exports='<h1 ma-tr="ui.dox.watchdog"></h1>\n\n<p>\n    There is a watchdog service which periodically pings an API endpoint to check if the Mango API is up and if\n    the user is logged in.\n</p>\n\n<p>\n    The mangoWatchdog object is on the root scope, you can check <code>mangoWatchdog.apiUp</code> to see if the API is up\n    and <code>mangoWatchdog.loggedIn</code> to see if the user is logged in. There is also a more detailed status string\n    available at <code>mangoWatchdog.status</code>.\n</p>\n\n<p>\n    See API Documentation for the <a ui-sref="ui.docs.ngMangoServices.maWatchdog"><code>mangoWatchdog</code></a> service.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div>\n    The watchdog status is <span ng-bind="mangoWatchdog.status"></span>.\n</div>\n\n<div ng-if="!mangoWatchdog.apiUp">\n    <strong>Failure</strong> Connectivity to the Mango API has been lost.\n</div>\n\n<div ng-if="mangoWatchdog.apiUp">\n    <strong>Good</strong> Connection to the Mango API is OK.\n</div>\n\n<div ng-if="mangoWatchdog.loggedIn">\n    <strong>Good</strong> Connection to the Mango API is OK and the user is logged in.\n</div>\n\n</ma-ui-dual-pane-editor>\n'},3630:function(e,n){e.exports='<h1 ma-tr="ui.app.eventsTable"></h1>\n\n<p>\n    This example shows you how to use <code>&lt;ma-events-table&gt;</code> to display a filterable table of events.\n    A large amount of the markup below is for the dropdown controls for setting the filter options. Alternatively you can use\n    <code>&lt;ma-events-table&gt;</code> and hard code the event filters as shown on the api doc for this component.\n</p>\n\n<p>\n    Add <code>single-point</code> and <code>point-id</code> attributes to display events for just a single Data Point.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maEventsTable"><code>&lt;ma-events-table&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<md-card>\n    <md-toolbar class="md-whiteframe-1dp md-hue-3">\n        <div class="md-toolbar-tools">\n            <h2 flex>\n                <span>Events Table</span>\n            </h2>\n            <div>\n                <md-button class="md-raised md-primary md-hue-1" ng-init="eventType=\'any\'"\n                           ng-class="{ \'active md-accent\': eventType === \'any\' }" ng-click="eventType=\'any\'">Any\n                </md-button>\n                <md-button class="md-raised md-primary md-hue-1" ng-class="{ \'active md-accent\': eventType === \'DATA_POINT\' }"\n                           ng-click="eventType=\'DATA_POINT\'">Data Point\n                </md-button>\n                <md-button class="md-raised md-primary md-hue-1"\n                           ng-class="{ \'active md-accent\': eventType === \'DATA_SOURCE\' }" ng-click="eventType=\'DATA_SOURCE\'">\n                    Data Source\n                </md-button>\n                <md-button class="md-raised md-primary md-hue-1" ng-class="{ \'active md-accent\': eventType === \'SYSTEM\' }"\n                           ng-click="eventType=\'SYSTEM\'">System\n                </md-button>\n            </div>\n        </div>\n    </md-toolbar>\n\n    <md-card-actions layout="row" layout-align="start center" layout-wrap="">\n        <md-input-container flex="">\n            <label>Alarm Level</label>\n            <md-select ng-model="alarmLevel" ng-init="alarmLevel=\'any\'">\n                <md-option value="any"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-all"></md-icon>Any</md-option>\n                <md-option value="NONE"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-none"></md-icon>None</md-option>\n                <md-option value="INFORMATION"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-information"></md-icon>Information</md-option>\n                <md-option value="IMPORTANT"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-important"></md-icon>Important</md-option>\n                <md-option value="WARNING"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-warning"></md-icon>Warning</md-option>\n                <md-option value="URGENT"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-urgent">Urgent</md-icon></md-option>\n                <md-option value="CRITICAL"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-critical"></md-icon>Critical</md-option>\n                <md-option value="LIFE_SAFETY"><md-icon class="fa fa-flag fa-lg ma-alarm-flag ma-alarm-level-life-safety"></md-icon>Safety</md-option>\n            </md-select>\n        </md-input-container>\n        <md-input-container flex="">\n            <label>Active Status</label>\n            <md-select ng-model="activeStatus" ng-init="activeStatus=\'any\'">\n                <md-option value="any">Any</md-option>\n                <md-option value="active">Active</md-option>\n                <md-option value="noRtn">No return</md-option>\n                <md-option value="normal">Returned to normal</md-option>\n            </md-select>\n        </md-input-container>\n        <md-input-container flex="">\n            <label>Acknowledged</label>\n            <md-select ng-model="acknowledged" ng-init="acknowledged=\'any\'">\n                <md-option value="any">Any</md-option>\n                <md-option ng-value="true">Acknowledged</md-option>\n                <md-option ng-value="false">Unacknowledged</md-option>\n            </md-select>\n        </md-input-container>\n    </md-card-actions>\n\n    <ma-events-table event-type="eventType" alarm-level="alarmLevel" acknowledged="acknowledged" event-id="eventId"\n                     active-status="activeStatus" limit="10" sort="\'-alarmLevel\'"></ma-events-table>\n</md-card>\n\n</ma-ui-dual-pane-editor>'},3631:function(e,n){e.exports='<h1>Google Maps</h1>\n\n<p>\n    Google maps can be added to your custom pages using the <code>&lt;ma-map&gt;</code> component. Under the hood <code>&lt;ma-map&gt;</code> uses the\n    <a href="https://ngmap.github.io/#/!infowindow_ng_click.html" target="_blank">ng-map</a> package which allows you to nest\n    <code>&lt;marker&gt;</code> and <code>&lt;info-window&gt;</code> components inside <code>&lt;ma-map&gt;</code>.\n    The example shown here demonstrates how you can use markers to toggle Info Windows that contain other components, change\n    marker icons, set initial marker and map location (lat/long),\n    make markers draggable, and use a marker to set <code>output-data</code> that can update other parts of your page. \n</p>\n\n<p>\n   * Note: In order to use the <code>&lt;ma-map&gt;</code> component you must set up your own <code>Google Maps API Key</code>. You\n    can <a href="https://developers.google.com/maps/documentation/javascript/get-api-key" target="_blank">get your key</a> from\n    Google then enter it into the <a ui-sref="ui.settings.uiSettings">UI Settings</a> page. For this example you will want to\n    update the <code>point-xids</code> to match data points in your system.\n</p>\n\n<p>\n    See API Documentation for <a ui-sref="ui.docs.ngMango.maMap"><code>&lt;ma-map&gt;</code></a>.\n</p>\n\n<ma-ui-dual-pane-editor>\n    \n<ma-get-point-value point-xid="Demo 01-fan" point="myPoint1"></ma-get-point-value> \n<ma-get-point-value point-xid="Demo 01-setpoint" point="myPoint2"></ma-get-point-value> \n<ma-get-point-value point-xid="Demo 01-Temp" point="myPoint3"></ma-get-point-value>\n<ma-point-values point="myPoint3" values="chart1Vals" latest="50"></ma-point-values> \n\n<ul>\n    <li><strong>First Marker:</strong> Clicking toggles an info window which sets a binary point\'s value to "{{myPoint1.value}}" and uses its value to switch its icon.</li>\n    <li><strong>Green Marker:</strong> Clicking toggles an info window which sets a numeric point\'s value to {{myPoint2.value}}.</li>\n    <li><strong>Red Marker:</strong> Clicking toggles an info window which displays a small chart of latest 50 values.</li>\n    <li><strong>Yellow Marker:</strong> Sets output-data variable to "{{myOutputData}}".</li>\n</ul>\n\n<br>\n\n<ma-map lat="-12.95" long="-38.45" zoom="12" map-type="roadmap" info-window-theme="dark" desktop-height="600px" mobile-height="450px"\nng-init="myMarkers={\n        true: \'img/map-markers/purple-dot.png\',\n        false: \'img/map-markers/orange-dot.png\'}" output-data="myOutputData">\n    \n    <marker id="marker1" position="-12.90, -38.41" icon="{url: \'{{myMarkers[myPoint1.value]}}\'}" on-click="$parent.$ctrl.toggleInfoWindow(\'setPoint1\', \'marker1\')"></marker>\n    <marker id="marker2" position="-12.95, -38.43" draggable="true" icon="{url: \'img/map-markers/green-dot.png\'}" on-click="$parent.$ctrl.toggleInfoWindow(\'setPoint2\', \'marker2\')"></marker>\n    <marker id="marker3" position="-12.99, -38.47" draggable="true" on-click="$parent.$ctrl.toggleInfoWindow(\'chart1\', \'marker3\')"></marker>\n    <marker id="marker4" position="-12.92, -38.42" draggable="true" icon="{url: \'img/map-markers/yellow-dot.png\'}" on-click="$parent.$ctrl.setOutputData(\'Demo 01-amps\')"></marker>\n    \n    <info-window id="setPoint2">    \n        <div>\n            <ma-set-point-value point="myPoint2"></ma-set-point-value>\n        </div>\n    </info-window>\n    <info-window id="setPoint1">\n        <div>\n            <ma-set-point-value point="myPoint1"></ma-set-point-value>\n        </div>\n    </info-window>\n    <info-window id="chart1">\n        <div layout="row" layout-padding>\n            <ma-serial-chart style="height: 150px; width: 250px" series-1-point="myPoint3" series-1-values="chart1Vals"></ma-serial-chart>\n        </div>\n    </info-window>\n</ma-map>\n\n</ma-ui-dual-pane-editor>'},3632:function(e,n){e.exports='<h1 ma-tr="ui.dox.basicSvg"></h1>\n\n<p>\n    SVG (Scalable Vector Graphics) is a modern image format built for displaying graphics on the web. Unlike jpg/png raster\n    images, SVG will scale up and down without blurring or losing resolution, due to the fact that it is rendered via\n    mathematical vector based instructions in it\'s XML syntax.\n</p>\n\n<p>\n    SVG graphics can be designed in a software such as <code>Adobe Illustrator</code> or <a href="https://inkscape.org"\n                                                                                            target="_blank">\n    Inkscape</a>. <code>Inkscape</code> is free and open-source option for editing vector graphics. With your graphic software or even a\n    text editor you can design your vector images and give specific <code>IDs</code> or <code>classes</code> to elements in your\n    graphic that you\n    want\n    to interact with.\n</p>\n\n<p>\n    In this example we have an SVG graphic, <code>status-panel.svg</code> that has an <code>#indicator</code> element and a\n    <code>#spinner</code> element. Using the <code>&lt;ma-svg&gt;</code> component you can pass in the path to the image into the\n    <code>ng-include</code> attribute. Then use divs with <code>ma-selector</code> to select an element within the SVG\n    graphic. Any valid CSS selector can be used, in this case we are selecting by ID of an element. Once selected you can apply\n    attributes such as <code>ng-style</code>, <code>ng-class</code>, and <code>ng-click</code>.\n</p>\n\n<p>\n    Here we have the <code>#indicator</code> element\'s fill color set by the value of a multi status data point. We also have\n    the <code>#spinner</code> element within the SVG linked to CSS spin classes that can be toggled to reverse spin direction.\n</p>\n\n<p>\n    Note: In order for the SVG examples to work you will want to <a\n    ui-sref="ui.settings.importExport">import</a> this <a\n    href="/modules/mangoUI/web/configs/demoSvgDataSource.json" target="_blank">JSON</a> file containing the virtual data source.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<ma-get-point-value point-xid="SVG-Demo-Status" point="indicatorStatus"></ma-get-point-value>\n\n<div layout layout-align="start center">\n    <h3 flex>\n        Indicator Status: {{indicatorStatus.renderedValue}}\n    </h3>\n    <md-checkbox ng-model="page.spin" ng-init="page={}">\n        Reverse the Spin!\n    </md-checkbox>\n</div>\n\n<ma-svg ng-include="\'/modules/mangoUI/web/img/status-panel.svg\'">\n    <div ma-selector="#indicator" ng-style="{\'fill\': indicatorStatus.value === 1 ? \'salmon\' : indicatorStatus.value === 2 ? \'turquoise\' : \'none\'}"></div>\n    <div ma-selector="#spinner" ng-class="{\'ma-spin-counterclockwise\': !page.spin, \'ma-spin-clockwise\': page.spin}"></div>\n</ma-svg>\n\n</ma-ui-dual-pane-editor>\n'},3633:function(e,n){e.exports='<h1 ma-tr="ui.dox.interactiveSvg"></h1>\n\n<p>\n    In this example we have an SVG graphic, <code>breaker-panel.svg</code> that has several of it\'s text and shape elements\n    tagged with <code>IDs</code>. The SVG graphic is imported into the <code>ng-include</code> attribute of\n    <code>&lt;ma-svg&gt;</code>.\n</p>\n\n<p>\n    Using the <code>ma-selector</code> directive we can assign <code>ng-bind</code> to display text within <code>tspan</code>\n    elements. Two of the text values are set via inputs on the page and the <code>#usage-amps</code> is set from the value of a\n    numeric data point.\n</p>\n\n<p>\n    The value of a multi status data point, <code>breakerStatus</code> is used to enable the <code>open/closed/tripped</code>\n    status indicator\'s on the right via styling the fill color based on the point\'s value.\n</p>\n\n<p>\n    The DAS control switch is used to control a settable binary data point called <code>dasStatus</code>. When you click on the\n    indicator you will toggle the value using <code>ng-click="dasStatus.toggleValue()"</code>. The <code>ON/OFF</code> elements\n    will set the value using <code>ng-click="dasStatus.setValue()"</code>. The fill color of the switches and indicator is set\n    using <code>ng-style</code> linked to <code>dasStatus.value</code>.\n</p>\n\n<p>\n    Note: In order for the SVG examples to work you will want to <a\n    ui-sref="ui.settings.importExport">import</a> this <a\n    href="/modules/mangoUI/web/configs/demoSvgDataSource.json" target="_blank">JSON</a> file containing the virtual data source.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<ma-get-point-value point-xid="SVG-Demo-Status" point="breakerStatus"></ma-get-point-value>\n<ma-get-point-value point-xid="SVG-Demo-Control" point="dasStatus"></ma-get-point-value>\n<ma-get-point-value point-xid="SVG-Demo-Current-Total" point="amperage"></ma-get-point-value>\n\n<div layout>\n    <md-input-container flex>\n        <input ng-model="page.name" ng-init="page.name = \'Breaker-01\'">\n    </md-input-container>\n    <md-input-container flex>\n        <input ng-model="page.amps" ng-init="page.amps = \'400A\'">\n    </md-input-container>\n</div>\n\n\n<ma-svg ng-include="\'/modules/mangoUI/web/img/breaker-panel.svg\'">\n    <div ma-selector="#usage-amps tspan" ng-bind="amperage.renderedValue"></div>\n    <div ma-selector="#name tspan" ng-bind="page.name"></div>\n    <div ma-selector="#amperage tspan" ng-bind="page.amps"></div>\n\n    <div ma-selector="#open-status" ng-style="{\'fill\': breakerStatus.value === 0 ? \'green\' : \'#6a6a6a\'}"></div>\n    <div ma-selector="#closed-status" ng-style="{\'fill\': breakerStatus.value === 1 ? \'blue\' : \'#6a6a6a\'}"></div>\n    <div ma-selector="#tripped-status" ng-style="{\'fill\': breakerStatus.value === 2 ? \'red\' : \'#6a6a6a\'}"></div>\n\n    <div ma-selector="#DAS-Status" ng-style="{\'fill\': dasStatus.value ? \'green\' : \'red\'}" ng-click="dasStatus.toggleValue()"></div>\n\n    <div ma-selector="#DAS-ON" ng-click="dasStatus.setValue(true)"></div>\n    <div ma-selector="#DAS-ON rect" ng-style="{\'fill\': dasStatus.value ? \'green\' : \'white\'}"></div>\n\n    <div ma-selector="#DAS-OFF" ng-click="dasStatus.setValue(false)"></div>\n    <div ma-selector="#DAS-OFF rect" ng-style="{\'fill\': !dasStatus.value ? \'red\' : \'white\'}"></div>\n</ma-svg>\n\n\n</ma-ui-dual-pane-editor>\n'},3634:function(e,n){e.exports='<h1 ma-tr="ui.dox.svgWindRose"></h1>\n\n<p>\n    This example illustrates how to bind data to a SVG image embedded into the document itself. You can add the angular directives (attributes)\n    such as <code>ng-style</code> directly into the SVG.\n</p>\n\n<ma-ui-dual-pane-editor>\n\n<div ng-init="directions = {north: [25,75,90]}">\n    <md-slider ng-model="directions.north[0]" min="0" max="100" step="1"></md-slider>\n    <md-slider ng-model="directions.north[1]" min="0" max="100" step="1"></md-slider>\n    <md-slider ng-model="directions.north[2]" min="0" max="100" step="1"></md-slider>\n</div>\n\n<svg xmlns="http://www.w3.org/2000/svg" viewBox="-120 -120 240 240" width="400" height="400">\n\n    <g class="grid">\n        <circle r="100" />\n        <circle r="75" />\n        <circle r="50" />\n        <circle r="25" />\n    </g>\n    \n    <g class="direction-lines">\n        <line x1="0" y1="0" x2="100" y2="0" transform="rotate(0)" />\n        <line x1="0" y1="0" x2="100" y2="0" transform="rotate(90)" />\n        <line x1="0" y1="0" x2="100" y2="0" transform="rotate(180)" />\n        <line x1="0" y1="0" x2="100" y2="0" transform="rotate(270)" />\n    </g>\n    \n    <g class="direction-text">\n        <text transform="translate(0,-110)">N</text>\n        <text transform="translate(110,0)">E</text>\n        <text transform="translate(0,110)">S</text>\n        <text transform="translate(-110,0)">W</text>\n    </g>\n\n    <clipPath id="cone" clip-path="url(#cone-end)">\n        <rect width="100" height="100" transform="rotate(-15)"></rect>\n    </clipPath>\n    \n    <clipPath id="cone-end">\n        <rect width="100" height="100" transform="rotate(-75)"></rect>\n    </clipPath>\n    \n    <g class="direction-cones" transform="rotate(-90)">\n        <g id="north" transform="rotate(0)">\n            <circle class="scale-3" r="100" ng-style="{transform: \'scale(\' + directions.north[2] / 100 + \')\'}" />\n            <circle class="scale-2" r="100" ng-style="{transform: \'scale(\' + directions.north[1] / 100 + \')\'}" />\n            <circle class="scale-1" r="100" ng-style="{transform: \'scale(\' + directions.north[0] / 100 + \')\'}" />\n        </g>\n        <g id="north-east" transform="rotate(45)">\n            <circle class="scale-3" r="100" />\n            <circle class="scale-2" r="100" />\n            <circle class="scale-1" r="100" />\n        </g>\n        <g id="east" transform="rotate(90)">\n            <circle class="scale-3" r="100" />\n            <circle class="scale-2" r="100" />\n            <circle class="scale-1" r="100" />\n        </g>\n        <g id="south-east" transform="rotate(135)">\n            <circle class="scale-3" r="100" />\n            <circle class="scale-2" r="100" />\n            <circle class="scale-1" r="100" />\n        </g>\n        <g id="south" transform="rotate(180)">\n            <circle class="scale-3" r="100" />\n            <circle class="scale-2" r="100" />\n            <circle class="scale-1" r="100" />\n        </g>\n        <g id="south-west" transform="rotate(225)">\n            <circle class="scale-3" r="100" />\n            <circle class="scale-2" r="100" />\n            <circle class="scale-1" r="100" />\n        </g>\n        <g id="west" transform="rotate(270)">\n            <circle class="scale-3" r="100" />\n            <circle class="scale-2" r="100" />\n            <circle class="scale-1" r="100" />\n        </g>\n        <g id="north-west" transform="rotate(315)">\n            <circle class="scale-3" r="100" />\n            <circle class="scale-2" r="100" />\n            <circle class="scale-1" r="100" />\n        </g>\n    </g>\n\n    <circle id="center" r="5" />\n</svg>\n\n<style>\n    g.grid circle {\n        fill: transparent;\n        stroke: grey;\n        stroke-width: 1px;\n        stroke-dasharray:10,10;\n        stroke-opacity: 0.5;\n    }\n\n    g.direction-cones circle {\n        clip-path: url(#cone);\n        transform: scale(0);\n    }\n    \n    g.direction-cones circle.scale-1 {\n        fill: darkblue;\n    }\n    \n    g.direction-cones circle.scale-2 {\n        fill: darkgreen;\n    }\n    \n    g.direction-cones circle.scale-3 {\n        fill: green;\n    }\n    \n    g.direction-lines line {\n        stroke: grey;\n        stroke-width: 1px;\n    }\n    \n    g.direction-text text {\n        fill: white;\n        text-anchor: middle;\n        alignment-baseline: middle;\n        font-size: 16px;\n    }\n    \n    #center {\n        fill: white;\n    }\n</style>\n\n</ma-ui-dual-pane-editor>\n'}}]);