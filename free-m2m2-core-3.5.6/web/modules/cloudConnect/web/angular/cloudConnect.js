!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("angular")):"function"==typeof define&&define.amd?define(["angular"],n):"object"==typeof exports?exports.cloudConnect=n(require("angular")):t.cloudConnect=n(t.angular)}(window,function(t){return function(t){var n={};function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}return e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(o,r,function(n){return t[n]}.bind(null,r));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="/modules/cloudConnect/web/angular/",e(e.s=17)}([function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",o=t[3];if(!o)return e;if(n&&"function"==typeof btoa){var r=function(t){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t))))+" */"}(o),a=o.sources.map(function(t){return"/*# sourceURL="+o.sourceRoot+t+" */"});return[e].concat(a).concat([r]).join("\n")}return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var o={},r=0;r<this.length;r++){var a=this[r][0];"number"==typeof a&&(o[a]=!0)}for(r=0;r<t.length;r++){var c=t[r];"number"==typeof c[0]&&o[c[0]]||(e&&!c[2]?c[2]=e:e&&(c[2]="("+c[2]+") and ("+e+")"),n.push(c))}},n}},function(t,n,e){var o={},r=function(t){var n;return function(){return void 0===n&&(n=t.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),a=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var o=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(t){o=null}n[t]=o}return n[t]}}(),c=null,s=0,d=[],i=e(12);function l(t,n){for(var e=0;e<t.length;e++){var r=t[e],a=o[r.id];if(a){a.refs++;for(var c=0;c<a.parts.length;c++)a.parts[c](r.parts[c]);for(;c<r.parts.length;c++)a.parts.push(g(r.parts[c],n))}else{var s=[];for(c=0;c<r.parts.length;c++)s.push(g(r.parts[c],n));o[r.id]={id:r.id,refs:1,parts:s}}}}function m(t,n){for(var e=[],o={},r=0;r<t.length;r++){var a=t[r],c=n.base?a[0]+n.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};o[c]?o[c].parts.push(s):e.push(o[c]={id:c,parts:[s]})}return e}function u(t,n){var e=a(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=d[d.length-1];if("top"===t.insertAt)o?o.nextSibling?e.insertBefore(n,o.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),d.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=a(t.insertAt.before,e);e.insertBefore(n,r)}}function p(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=d.indexOf(t);n>=0&&d.splice(n,1)}function h(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var o=function(){0;return e.nc}();o&&(t.attrs.nonce=o)}return y(n,t.attrs),u(t,n),n}function y(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function g(t,n){var e,o,r,a;if(n.transform&&t.css){if(!(a="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=a}if(n.singleton){var d=s++;e=c||(c=h(n)),o=f.bind(null,e,d,!1),r=f.bind(null,e,d,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",y(n,t.attrs),u(t,n),n}(n),o=function(t,n,e){var o=e.css,r=e.sourceMap,a=void 0===n.convertToAbsoluteUrls&&r;(n.convertToAbsoluteUrls||a)&&(o=i(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var c=new Blob([o],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(c),s&&URL.revokeObjectURL(s)}.bind(null,e,n),r=function(){p(e),e.href&&URL.revokeObjectURL(e.href)}):(e=h(n),o=function(t,n){var e=n.css,o=n.media;o&&t.setAttribute("media",o);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),r=function(){p(e)});return o(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;o(t=n)}else r()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=r()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=m(t,n);return l(e,n),function(t){for(var r=[],a=0;a<e.length;a++){var c=e[a];(s=o[c.id]).refs--,r.push(s)}t&&l(m(t,n),n);for(a=0;a<r.length;a++){var s;if(0===(s=r[a]).refs){for(var d=0;d<s.parts.length;d++)s.parts[d]();delete o[s.id]}}}};var b=function(){var t=[];return function(n,e){return t[n]=e,t.filter(Boolean).join("\n")}}();function f(t,n,e,o){var r=e?"":o.css;if(t.styleSheet)t.styleSheet.cssText=b(n,r);else{var a=document.createTextNode(r),c=t.childNodes;c[n]&&t.removeChild(c[n]),c.length?t.insertBefore(a,c[n]):t.appendChild(a)}}},function(n,e){n.exports=t},function(t,n){t.exports='<md-tabs md-dynamic-height md-border-bottom md-selected="$ctrl.selectedTab">\n    <md-tab id="cloud-connect-client-settings">\n        <md-tab-label><span>Client</span></md-tab-label>\n        <md-tab-body class="md-padding">\n            <ma-cloud-connect-client-settings></ma-cloud-connect-client-settings>\n        </md-tab-body>\n    </md-tab>\n    <md-tab id="cloud-connect-server-settings">\n        <md-tab-label><span>Server</span></md-tab-label>\n        <md-tab-body class="md-padding">\n            <ma-cloud-connect-server-settings></ma-cloud-connect-server-settings>\n        </md-tab-body>\n    </md-tab>\n    <md-tab id="cloud-connect-proxy-settings">\n        <md-tab-label><span>Proxy</span></md-tab-label>\n        <md-tab-body>\n            <ma-cloud-connect-proxy-settings></ma-cloud-connect-proxy-settings>\n        </md-tab-body>\n    </md-tab>\n</md-tabs>'},function(t,n){t.exports='<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.server"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <ma-cloud-connect-server-status></ma-cloud-connect-server-status>\n\n        <div layout layout-align="start center" class="ma-cloud-connect-buttons">\n            <md-button class="md-raised md-primary" ng-click="$ctrl.server.start()" ng-disabled="!$ctrl.server.startState || $ctrl.server.startState === \'STARTED\'">\n                <md-icon>play_arrow</md-icon><span ma-tr="cloudConnect.start"></span>\n            </md-button>\n            <md-button class="md-raised md-warn" ng-click="$ctrl.server.stop()" ng-disabled="!$ctrl.server.startState || $ctrl.server.startState === \'STOPPED\'">\n                <md-icon>stop</md-icon><span ma-tr="cloudConnect.stop"></span>\n            </md-button>\n            <md-button class="md-raised" ng-click="$ctrl.server.restart()" ng-disabled="!$ctrl.server.startState || $ctrl.server.startState === \'STOPPED\'">\n                <md-icon>refresh</md-icon><span ma-tr="cloudConnect.restart"></span>\n            </md-button>\n            <md-button class="md-raised" ng-click="$ctrl.server.reload()" ng-disabled="!$ctrl.server.startState || $ctrl.server.startState === \'STOPPED\'">\n                <md-icon>refresh</md-icon><span ma-tr="cloudConnect.reload"></span>\n            </md-button>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.server.settings"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.server.enabled" key="cloudConnect.server.enabled" type="BOOLEAN" input-type="checkbox" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout="row" layout-align="start center" layout-wrap>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.server.bind" key="cloudConnect.server.bind" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.server.port" key="cloudConnect.server.port" type="INTEGER" input-type="number" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.server.authorizedKeysPath" key="cloudConnect.server.authorizedKeysPath" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.server.privateKeyPath" key="cloudConnect.server.privateKeyPath" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.server.portAllocationRange.from" key="cloudConnect.server.portAllocationRange.from" type="INTEGER" input-type="number" min="1" max="65535" step="1" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.server.portAllocationRange.to" key="cloudConnect.server.portAllocationRange.to" type="INTEGER" input-type="number" min="1" max="65535" step="1" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout layout-align="start center" class="ma-cloud-connect-buttons">\n            <md-button class="md-raised md-warn" ng-click="$ctrl.server.newKeyPair()">\n                <md-icon>lock</md-icon><span ma-tr="cloudConnect.newKeyPair"></span>\n            </md-button>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.server.publicKey"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout>\n            <md-input-container flex class="ma-cloud-connect-public-key">\n                <label ma-tr="cloudConnect.server.publicKey"></label>\n                <textarea readonly="readonly" ng-model="$ctrl.server.publicKey"></textarea>\n            </md-input-container>\n        </div>\n        \n        <div layout layout-align="start center" class="ma-cloud-connect-buttons">\n            <md-button class="md-raised" ng-click="$ctrl.copyPublicKeyToClipboard($event)">\n                <md-icon>content_copy</md-icon>\n                <span ma-tr="ui.app.copyToClipboard"></span>\n            </md-button>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.server.authorizedKeys"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        \n        <div layout layout-align="start center">\n            <md-input-container flex>\n                <label ma-tr="cloudConnect.server.addAuthorizedKey"></label>\n                <textarea ng-model="$ctrl.newAuthorizedKey"></textarea>\n            </md-input-container>\n            <md-button class="md-raised" ng-click="$ctrl.server.addAuthorizedKey($ctrl.newAuthorizedKey); $ctrl.newAuthorizedKey = \'\'" ng-disabled="!$ctrl.newAuthorizedKey">\n                <span ma-tr="common.add"></span>\n            </md-button>\n        </div>\n\n        <md-table-container>\n            <table md-table md-progress="$ctrl.authorizedKeysPromise">\n                <thead md-head md-order="$ctrl.authorizedKeysOrder">\n                    <tr md-row>\n                        <th md-column></th>\n                        <th md-column md-order-by="algorithm" ma-tr="cloudConnect.algorithm"></th>\n                        <th md-column md-order-by="publicKey" ma-tr="cloudConnect.publicKey"></th>\n                        <th md-column md-order-by="comment" ma-tr="cloudConnect.comment"></th>\n                    </tr>\n                </thead>\n                <tbody md-body>\n                    <tr md-row ng-repeat="authorizedKey in $ctrl.server.authorizedKeys | orderBy:$ctrl.authorizedKeysOrder | limitTo:$ctrl.authorizedKeysLimit:($ctrl.authorizedKeysPage-1)*$ctrl.authorizedKeysLimit track by $index">\n                        <td>\n                            <md-button class="md-icon-button" ng-click="$ctrl.server.removeAuthorizedKey(authorizedKey.comment)">\n                                <md-icon>delete</md-icon>\n                            </md-button>\n                        </td>\n                        <td md-cell ng-bind="authorizedKey.algorithm"></td>\n                        <td md-cell ng-bind="authorizedKey.publicKey"></td>\n                        <td md-cell ng-bind="authorizedKey.comment"></td>\n                    </tr>\n                </tbody>\n            </table>\n        </md-table-container>\n        \n        <md-table-pagination md-limit="$ctrl.authorizedKeysLimit" md-limit-options="[10, 20, 50, 100]" md-page="$ctrl.authorizedKeysPage" md-total="{{$ctrl.server.authorizedKeys.length}}" md-page-select></md-table-pagination>\n\n    </md-card-content>\n</md-card>\n\n<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.server.connectedClients"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <ma-cloud-connect-connected-clients-table></ma-cloud-connect-connected-clients-table>\n    </md-card-content>\n</md-card>\n'},function(t,n){t.exports='<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.client"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n    \n        <ma-cloud-connect-client-status></ma-cloud-connect-client-status>\n\n        <div layout layout-align="start center" class="ma-cloud-connect-buttons">\n            <md-button class="md-raised md-primary" ng-click="$ctrl.client.start()" ng-disabled="!$ctrl.client.startState || $ctrl.client.startState === \'STARTED\'">\n                <md-icon>play_arrow</md-icon><span ma-tr="cloudConnect.start"></span>\n            </md-button>\n            <md-button class="md-raised md-warn" ng-click="$ctrl.client.stop()" ng-disabled="!$ctrl.client.startState || $ctrl.client.startState === \'STOPPED\'">\n                <md-icon>stop</md-icon><span ma-tr="cloudConnect.stop"></span>\n            </md-button>\n            <md-button class="md-raised" ng-click="$ctrl.client.restart()" ng-disabled="!$ctrl.client.startState || $ctrl.client.startState !== \'STARTED\'">\n                <md-icon>refresh</md-icon><span ma-tr="cloudConnect.restart"></span>\n            </md-button>\n            <md-button class="md-raised" ng-click="$ctrl.client.reload()" ng-disabled="!$ctrl.client.startState || $ctrl.client.startState !== \'STARTED\'">\n                <md-icon>refresh</md-icon><span ma-tr="cloudConnect.reload"></span>\n            </md-button>\n        </div>\n        \n    </md-card-content>\n</md-card>\n\n<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.client.settings"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.client.enabled" key="cloudConnect.client.enabled" type="BOOLEAN" input-type="checkbox" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout="row" layout-align="start center" layout-wrap>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.host" key="cloudConnect.client.host" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.port" key="cloudConnect.client.port" type="INTEGER" input-type="number" min="1" max="65535" step="1" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.knownHostsPath" key="cloudConnect.client.knownHostsPath" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.privateKeyPath" key="cloudConnect.client.privateKeyPath" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.client.acceptUnkownHosts" key="cloudConnect.client.acceptUnkownHosts" type="BOOLEAN" input-type="checkbox" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.client.forward.web.enabled" key="cloudConnect.client.forward.web.enabled" type="BOOLEAN" input-type="checkbox" on-value-changed="$ctrl.forwardWebEnabled = $value" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div ng-if="$ctrl.forwardWebEnabled" layout="row" layout-align="start center" layout-wrap>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.forward.web.host" key="cloudConnect.client.forward.web.host" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.forward.web.port" key="cloudConnect.client.forward.web.port" type="INTEGER" input-type="number" min="1" max="65535" step="1" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.client.forward.ssh.enabled" key="cloudConnect.client.forward.ssh.enabled" type="BOOLEAN" input-type="checkbox" on-value-changed="$ctrl.forwardSshEnabled = $value" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div ng-if="$ctrl.forwardSshEnabled" layout="row" layout-align="start center" layout-wrap>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.forward.ssh.host" key="cloudConnect.client.forward.ssh.host" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.client.forward.ssh.port" key="cloudConnect.client.forward.ssh.port" type="INTEGER" input-type="number" min="1" max="65535" step="1" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout layout-align="start center" class="ma-cloud-connect-buttons">\n            <md-button class="md-raised md-warn" ng-click="$ctrl.client.newKeyPair()">\n                <md-icon>lock</md-icon><span ma-tr="cloudConnect.newKeyPair"></span>\n            </md-button>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.client.publicKey"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout>\n            <md-input-container flex class="ma-cloud-connect-public-key">\n                <label ma-tr="cloudConnect.client.publicKey"></label>\n                <textarea readonly="readonly" ng-model="$ctrl.client.publicKey"></textarea>\n            </md-input-container>\n        </div>\n        \n        <div layout layout-align="start center" class="ma-cloud-connect-buttons">\n            <md-button class="md-raised" ng-click="$ctrl.copyPublicKeyToClipboard($event)">\n                <md-icon>content_copy</md-icon>\n                <span ma-tr="ui.app.copyToClipboard"></span>\n            </md-button>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.client.knownHosts"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        \n        <div layout layout-align="start center">\n            <md-input-container flex>\n                <label ma-tr="cloudConnect.client.addKnownHost"></label>\n                <textarea ng-model="$ctrl.newKnownHost"></textarea>\n            </md-input-container>\n            <md-button class="md-raised" ng-click="$ctrl.client.addKnownHost($ctrl.newKnownHost); $ctrl.newKnownHost = \'\'" ng-disabled="!$ctrl.newKnownHost">\n                <span ma-tr="common.add"></span>\n            </md-button>\n        </div>\n\n        <md-table-container>\n            <table md-table md-progress="$ctrl.knownHostsPromise">\n                <thead md-head md-order="$ctrl.knownHostsOrder">\n                    <tr md-row>\n                        <th md-column></th>\n                        <th md-column md-order-by="hostname" ma-tr="cloudConnect.hostname"></th>\n                        <th md-column md-order-by="algorithm" ma-tr="cloudConnect.algorithm"></th>\n                        <th md-column md-order-by="publicKey" ma-tr="cloudConnect.publicKey"></th>\n                        <th md-column md-order-by="comment" ma-tr="cloudConnect.comment"></th>\n                    </tr>\n                </thead>\n                <tbody md-body>\n                    <tr md-row ng-repeat="knownHost in $ctrl.client.knownHosts | orderBy:$ctrl.knownHostsOrder | limitTo:$ctrl.knownHostsLimit:($ctrl.knownHostsPage-1)*$ctrl.knownHostsLimit track by $index">\n                        <td>\n                            <md-button class="md-icon-button" ng-click="$ctrl.client.removeKnownHost(knownHost.hostname)">\n                                <md-icon>delete</md-icon>\n                            </md-button>\n                        </td>\n                        <td md-cell ng-bind="knownHost.hostname"></td>\n                        <td md-cell ng-bind="knownHost.algorithm"></td>\n                        <td md-cell ng-bind="knownHost.publicKey"></td>\n                        <td md-cell ng-bind="knownHost.comment"></td>\n                    </tr>\n                </tbody>\n            </table>\n        </md-table-container>\n        \n        <md-table-pagination md-limit="$ctrl.knownHostsLimit" md-limit-options="[10, 20, 50, 100]" md-page="$ctrl.knownHostsPage" md-total="{{$ctrl.client.knownHosts.length}}" md-page-select></md-table-pagination>\n\n    </md-card-content>\n</md-card>\n'},function(t,n){t.exports='<md-card>\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.proxy"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.proxy.enabled" key="cloudConnect.proxy.enabled" type="BOOLEAN" input-type="checkbox" on-value-changed="$ctrl.proxyEnabled = $value" save-on-change="true"></ma-system-setting-editor>\n        </div>\n\n        <div layout layout-align="start center" class="ma-cloud-connect-buttons">\n            <md-button class="md-raised md-warn" ng-click="$ctrl.maCloudConnect.proxy.restart()">\n                <md-icon>loop</md-icon><span ma-tr="modules.restart"></span>\n            </md-button>\n            <md-button class="md-raised" ng-click="$ctrl.maCloudConnect.proxy.reload()">\n                <md-icon>refresh</md-icon><span ma-tr="cloudConnect.reload"></span>\n            </md-button>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card ng-if="$ctrl.proxyEnabled">\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.proxy.settings"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout="row" layout-align="start center" layout-wrap>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.proxy.proxyDomain" key="cloudConnect.proxy.proxyDomain" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.proxy.serveStaticResources" key="cloudConnect.proxy.serveStaticResources" type="BOOLEAN" input-type="checkbox" save-on-change="true"></ma-system-setting-editor>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card ng-if="$ctrl.proxyEnabled">\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.proxy.localAuthentication"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.proxy.requiresAuthentication" key="cloudConnect.proxy.requiresAuthentication" type="BOOLEAN" input-type="checkbox" on-value-changed="$ctrl.requiresAuthentication = $value" save-on-change="true"></ma-system-setting-editor>\n        </div>\n        \n        <div ng-if="$ctrl.requiresAuthentication" layout="row" layout-align="start center" layout-wrap>\n            <ma-system-setting-editor flex="100" flex-gt-md="50" label-tr="cloudConnect.proxy.requiresPermission" key="cloudConnect.proxy.requiresPermission" save-on-change="true"></ma-system-setting-editor>\n        </div>\n    </md-card-content>\n</md-card>\n\n<md-card ng-if="$ctrl.proxyEnabled && $ctrl.requiresAuthentication">\n    <md-card-header>\n        <md-card-header-text>\n            <span class="md-title" ma-tr="cloudConnect.proxy.remoteAuthentication"></span>\n        </md-card-header-text>\n    </md-card-header>\n    <md-card-content>\n        <div layout="column" layout-align="start start">\n            <ma-system-setting-editor label-tr="cloudConnect.proxy.injectAuthenticationToken" key="cloudConnect.proxy.injectAuthenticationToken" type="BOOLEAN" input-type="checkbox" on-value-changed="$ctrl.injectAuthenticationToken = $value" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor ng-if="$ctrl.injectAuthenticationToken" ng-disabled="$ctrl.fixedToken" label-tr="cloudConnect.proxy.syncUser" key="cloudConnect.proxy.syncUser" type="BOOLEAN" input-type="checkbox" on-value-changed="$ctrl.syncUser = $value" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor ng-if="$ctrl.injectAuthenticationToken" ng-disabled="$ctrl.fixedToken || !$ctrl.syncUser" label-tr="cloudConnect.proxy.syncUserPassword" key="cloudConnect.proxy.syncUserPassword" type="BOOLEAN" input-type="checkbox" save-on-change="true"></ma-system-setting-editor>\n        </div>\n\n        <div ng-if="$ctrl.injectAuthenticationToken" layout="row" layout-align="start center" layout-wrap>\n            <ma-system-setting-editor ng-disabled="!!$ctrl.fixedToken" flex="100" flex-gt-md="50" label-tr="cloudConnect.proxy.fixedUsername" key="cloudConnect.proxy.fixedUsername" save-on-change="true"></ma-system-setting-editor>\n            <ma-system-setting-editor flex="100" label-tr="cloudConnect.proxy.fixedToken" key="cloudConnect.proxy.fixedToken" save-on-change="true" on-value-changed="$ctrl.fixedToken = $value"></ma-system-setting-editor>\n        </div>\n    </md-card-content>\n</md-card>'},function(t,n){t.exports='<md-table-container>\n    <table md-table md-progress="$ctrl.clientsPromise">\n        <thead md-head md-order="$ctrl.clientsOrder">\n            <tr md-row>\n                <th md-column></th>\n                <th md-column md-order-by="instanceDescription" ma-tr="systemSettings.instanceDescription"></th>\n                <th md-column md-order-by="guid" ma-tr="modules.guid"></th>\n                <th md-column md-order-by="ipAddress" ma-tr="cloudConnect.ipAddress"></th>\n                <th md-column md-order-by="dateConnected" ma-tr="cloudConnect.dateConnected"></th>\n                <th md-column ma-tr="cloudConnect.mangoWebPort"></th>\n                <th md-column ma-tr="cloudConnect.sshPort"></th>\n                <th md-column md-order-by="coreVersion" ma-tr="cloudConnect.coreVersion"></th>\n                <th md-column md-order-by="moduleVersion" ma-tr="cloudConnect.moduleVersion"></th>\n            </tr>\n        </thead>\n        <tbody md-body>\n            <tr md-row ng-repeat="client in $ctrl.server.clients | orderBy:$ctrl.clientsOrder | limitTo:$ctrl.clientsLimit:($ctrl.clientsPage-1)*$ctrl.clientsLimit track by $index">\n                <td md-cell>\n                    <md-button ng-if="client.url" ng-href="{{client.url}}" target="cloud_connect_{{client.guid}}" class="md-button md-icon-button">\n                        <md-icon>open_in_new</md-icon>\n                        <md-tooltip ma-tr="cloudConnect.server.openWebInterface"></md-tooltip>\n                    </md-button>\n                    <md-button class="md-icon-button" ng-click="$ctrl.server.closeSession(client.id)">\n                        <md-icon>clear</md-icon>\n                        <md-tooltip ma-tr="cloudConnect.server.closeSession"></md-tooltip>\n                    </md-button>\n                </td>\n                <td md-cell ng-bind="client.instanceDescription"></td>\n                <td md-cell ng-bind="client.guid"></td>\n                <td md-cell ng-bind="client.ipAddress"></td>\n                <td md-cell ng-bind="client.dateConnected | maMoment:\'format\':\'l LT\'"></td>\n                <td md-cell ng-bind="(client.forwardedPorts | maFindBy:\'name\':\'web\').localAddress.port"></td>\n                <td md-cell ng-bind="(client.forwardedPorts | maFindBy:\'name\':\'ssh\').localAddress.port"></td>\n                <td md-cell ng-bind="client.coreVersion"></td>\n                <td md-cell ng-bind="client.moduleVersion"></td>\n            </tr>\n        </tbody>\n    </table>\n</md-table-container>\n<md-table-pagination md-limit="$ctrl.clientsLimit" md-limit-options="[10, 20, 50, 100]" md-page="$ctrl.clientsPage" md-total="{{$ctrl.server.clients.length}}" md-page-select></md-table-pagination>\n'},function(t,n){t.exports='<div ng-if="$ctrl.client.startState" class="ma-cloud-connect-start-state md-whiteframe-1dp" ng-class="\'ma-cloud-connect-start-state-\' + $ctrl.client.startState"\n        md-colors="{background: \'background-hue-2\', color: $ctrl.client.startState === \'STARTED\' ? \'primary\' : \'warn\'}">\n    <md-icon>{{$ctrl.client.startState === \'STARTED\' ? \'check\' : \'warning\'}}</md-icon>\n    <div ma-tr="cloudConnect.startState.{{$ctrl.client.startState}}"></div>\n</div>\n\n<div ng-if="$ctrl.client.startState === \'STARTED\' && $ctrl.client.connectionStatus" class="ma-cloud-connect-start-state md-whiteframe-1dp"\n        md-colors="{background: \'background-hue-2\', color: $ctrl.client.isConnected() ? \'primary\' : \'warn\'}">\n    <md-icon>{{$ctrl.client.isConnected() ? \'check\' : \'warning\'}}</md-icon>\n    \n    <div ng-if="$ctrl.client.isConnected()" ma-tr="cloudConnect.client.connected"></div>\n    <div ng-if="!$ctrl.client.isConnected()" ma-tr="cloudConnect.client.connecting"></div>\n</div>\n\n<div ng-if="$ctrl.client.startState === \'STARTED\' && $ctrl.client.connectionStatus && !$ctrl.client.isConnected()">\n    <div ma-tr="cloudConnect.client.connectionAttempt" ma-tr-args="[$ctrl.client.connectionStatus.retryCount + 1]"></div>\n    <div ng-if="$ctrl.client.connectionStatus.connectionError" ma-tr="cloudConnect.client.lastConnectionError" ma-tr-args="[$ctrl.client.connectionStatus.connectionError]"></div>\n</div>'},function(t,n){t.exports="<div ng-if=\"$ctrl.server.startState\" class=\"ma-cloud-connect-start-state md-whiteframe-1dp\" ng-class=\"'ma-cloud-connect-start-state-' + $ctrl.server.startState\"\n        md-colors=\"{background: 'background-hue-2', color: $ctrl.server.startState === 'STARTED' ? 'primary' : 'warn'}\">\n    <md-icon>{{$ctrl.server.startState === 'STARTED' ? 'check' : 'warning'}}</md-icon>\n    <div ma-tr=\"cloudConnect.startState.{{$ctrl.server.startState}}\"></div>\n</div>"},function(t,n,e){var o=e(11);"string"==typeof o&&(o=[[t.i,o,""]]);var r={insertAt:{before:'meta[name="user-styles-after-here"]'},hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(t.exports=o.locals)},function(t,n,e){(t.exports=e(0)(!1)).push([t.i,"ma-cloud-connect-page {\n\tdisplay: block;\n}\n\nma-cloud-connect-client-settings,\nma-cloud-connect-server-settings,\nma-cloud-connect-proxy-settings {\n\tdisplay: block;\n}\n\nma-cloud-connect-client-settings > md-card,\nma-cloud-connect-server-settings > md-card,\nma-cloud-connect-proxy-settings > md-card {\n\tmargin: 8px;\n}\n\n@media (min-width: 960px) {\n\tma-cloud-connect-client-settings > md-card,\n\tma-cloud-connect-server-settings > md-card,\n\tma-cloud-connect-proxy-settings > md-card\t{\n\t    margin: 16px;\n\t}\n}\n\nma-cloud-connect-page .md-button md-icon {\n\tmargin-right: 4px;\n}\n\nma-cloud-connect-page .ma-cloud-connect-buttons {\n\tmargin-top: 8px;\n}\n\nma-cloud-connect-page .ma-cloud-connect-buttons .md-button {\n\tmargin: 4px;\n}\n\nma-cloud-connect-page .ma-cloud-connect-buttons .md-button:first-of-type {\n\tmargin-left: 0px;\n}\n\nma-cloud-connect-page .ma-cloud-connect-buttons .md-button:last-of-type {\n\tmargin-right: 0px;\n}\n\nma-cloud-connect-page md-input-container.ma-cloud-connect-public-key {\n\tmargin: 0;\n}\n",""])},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,o=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var r,a=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(r=0===a.indexOf("//")?a:0===a.indexOf("/")?e+a:o+a.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(t,n,e){var o=e(14);"string"==typeof o&&(o=[[t.i,o,""]]);var r={insertAt:{before:'meta[name="user-styles-after-here"]'},hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(t.exports=o.locals)},function(t,n,e){(t.exports=e(0)(!1)).push([t.i,"ma-cloud-connect-client-status {\n\tdisplay: block;\n}\n\nma-cloud-connect-client-status .ma-cloud-connect-start-state {\n\tpadding: 10px 15px;\n\tborder-radius: 30px;\n\tmargin-bottom: 15px;\n\theight: 40px;\n\tmargin-right: 10px;\n\t\n\tdisplay: inline-flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: center;\n\t\n\tfont-size: 2.5rem;\n\tfont-weight: bold;\n}\n\nma-cloud-connect-client-status .ma-cloud-connect-start-state > md-icon {\n\tmargin-right: 10px;\n\tcolor: currentColor;\n}\n\nma-cloud-connect-client-status .ma-cloud-connect-start-state > div {\n\ttext-transform: uppercase;\n}\n",""])},function(t,n,e){var o=e(16);"string"==typeof o&&(o=[[t.i,o,""]]);var r={insertAt:{before:'meta[name="user-styles-after-here"]'},hmr:!0,transform:void 0,insertInto:void 0};e(1)(o,r);o.locals&&(t.exports=o.locals)},function(t,n,e){(t.exports=e(0)(!1)).push([t.i,"ma-cloud-connect-server-status {\n\tdisplay: block;\n}\n\nma-cloud-connect-server-status .ma-cloud-connect-start-state {\n\tpadding: 10px 15px;\n\tborder-radius: 30px;\n\tmargin-bottom: 15px;\n\theight: 40px;\n\tmargin-right: 10px;\n\t\n\tdisplay: inline-flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\talign-items: center;\n\t\n\tfont-size: 2.5rem;\n\tfont-weight: bold;\n}\n\nma-cloud-connect-server-status .ma-cloud-connect-start-state > md-icon {\n\tmargin-right: 10px;\n\tcolor: currentColor;\n}\n\nma-cloud-connect-server-status .ma-cloud-connect-start-state > div {\n\ttext-transform: uppercase;\n}\n",""])},function(t,n,e){"use strict";e.r(n);var o=e(2),r=e.n(o),a=e(3),c=e.n(a);e(10);var s={template:c.a,controller:class{static get $$ngIsClass(){return!0}static get $inject(){return["maCloudConnect","$interval","$scope"]}constructor(t,n,e){this.maCloudConnect=t,this.$interval=n,this.$scope=e}$onInit(){}},bindings:{}},d=e(4);var i={template:e.n(d).a,controller:class{static get $$ngIsClass(){return!0}static get $inject(){return["maCloudConnect","$scope","$element","maDialogHelper"]}constructor(t,n,e,o){this.maCloudConnect=t,this.$scope=n,this.$element=e,this.maDialogHelper=o,this.authorizedKeysLimit=10,this.authorizedKeysPage=1,this.authorizedKeysOrder="comment",this.server=t.server}$onInit(){this.server.getStartState(),this.server.getPublicKey(),this.authorizedKeysPromise=this.server.getAuthorizedKeys(),this.maCloudConnect.notificationManager.subscribe((t,n)=>{this.server.startState=n.startState,"RELOAD"===n.eventType&&(this.server.getPublicKey(),this.authorizedKeysPromise=this.server.getAuthorizedKeys())},this.$scope,["SERVER"])}copyPublicKeyToClipboard(t){this.$element[0].querySelector(".ma-cloud-connect-public-key textarea").select(),document.execCommand("copy")?this.maDialogHelper.toastOptions({textTr:"ui.app.copyToClipboardSucess"}):this.maDialogHelper.toastOptions({textTr:"ui.app.copyToClipboardFailed",hideDelay:1e4,classes:"md-warn"})}},bindings:{}},l=e(5);var m={template:e.n(l).a,controller:class{static get $$ngIsClass(){return!0}static get $inject(){return["maCloudConnect","$scope","$element","maDialogHelper"]}constructor(t,n,e,o){this.maCloudConnect=t,this.$scope=n,this.$element=e,this.maDialogHelper=o,this.knownHostsLimit=10,this.knownHostsPage=1,this.knownHostsOrder="hostname",this.client=t.client}$onInit(){this.client.getPublicKey(),this.knownHostsPromise=this.client.getKnownHosts(),this.maCloudConnect.notificationManager.subscribe((t,n)=>{"RELOAD"===n.eventType&&(this.client.getPublicKey(),this.knownHostsPromise=this.client.getKnownHosts())},this.$scope,["CLIENT"])}copyPublicKeyToClipboard(t){this.$element[0].querySelector(".ma-cloud-connect-public-key textarea").select(),document.execCommand("copy")?this.maDialogHelper.toastOptions({textTr:"ui.app.copyToClipboardSucess"}):this.maDialogHelper.toastOptions({textTr:"ui.app.copyToClipboardFailed",hideDelay:1e4,classes:"md-warn"})}},bindings:{}},u=e(6);var p={template:e.n(u).a,controller:class{static get $$ngIsClass(){return!0}static get $inject(){return["maCloudConnect","$interval","$scope"]}constructor(t,n,e){this.maCloudConnect=t,this.$interval=n,this.$scope=e}$onInit(){}},bindings:{}},h=e(7);var y={template:e.n(h).a,controller:class{static get $$ngIsClass(){return!0}static get $inject(){return["maCloudConnect","$scope"]}constructor(t,n){this.maCloudConnect=t,this.$scope=n,this.server=t.server,this.clientsLimit=10,this.clientsPage=1,this.clientsOrder="guid"}$onInit(){this.clientsPromise=this.server.getClients(),this.maCloudConnect.notificationManager.subscribe((t,n)=>{this.server.clients=n.clients},this.$scope,["SERVER"])}},bindings:{}},g=e(8),b=e.n(g);e(13);var f={template:b.a,controller:class{static get $$ngIsClass(){return!0}static get $inject(){return["maCloudConnect","$scope"]}constructor(t,n){this.maCloudConnect=t,this.$scope=n,this.client=t.client}$onInit(){this.client.getStartState(),this.client.getConnectionStatus(),this.maCloudConnect.notificationManager.subscribe((t,n)=>{this.client.startState=n.startState,this.client.connectionStatus=n.connectionStatus},this.$scope,["CLIENT"])}},bindings:{}},v=e(9),C=e.n(v);e(15);var x={template:C.a,controller:class{static get $$ngIsClass(){return!0}static get $inject(){return["maCloudConnect","$scope"]}constructor(t,n){this.maCloudConnect=t,this.$scope=n,this.server=t.server}$onInit(){this.server.getStartState(),this.maCloudConnect.notificationManager.subscribe((t,n)=>{this.server.startState=n.startState},this.$scope,["SERVER"])}},bindings:{}};function $(t,n,e,o,r,a){const c="/rest/v2/cloud-connect",s=a.has("maUiServerInfo")&&a.get("maUiServerInfo");class d{constructor(t){this.baseUrl=c+t}start(){return t({method:"POST",url:this.baseUrl+"/start"}).then(t=>this.startState=t.data,t=>{e.toastOptions({textTr:["cloudConnect.uiError.failedToStart",t.mangoStatusText],hideDelay:1e4,classes:"md-warn"})})}stop(){return t({method:"POST",url:this.baseUrl+"/stop"}).then(t=>this.startState=t.data,t=>{e.toastOptions({textTr:["cloudConnect.uiError.failedToStop",t.mangoStatusText],hideDelay:1e4,classes:"md-warn"})})}restart(){return t({method:"POST",url:this.baseUrl+"/restart"}).then(t=>this.startState=t.data,t=>{e.toastOptions({textTr:["cloudConnect.uiError.failedToRestart",t.mangoStatusText],hideDelay:1e4,classes:"md-warn"})})}reload(){return t({method:"POST",url:this.baseUrl+"/reload"}).then(t=>this.startState=t.data,t=>{e.toastOptions({textTr:["cloudConnect.uiError.failedToReload",t.mangoStatusText],hideDelay:1e4,classes:"md-warn"})})}getStartState(){return t({method:"GET",url:this.baseUrl+"/started"}).then(t=>this.startState=t.data)}getPublicKey(){return t({method:"GET",url:this.baseUrl+"/public-key"}).then(t=>this.publicKey=t.data)}newKeyPair(n,o){return e.confirm(n,o).then(()=>t({method:"POST",url:this.baseUrl+"/new-key-pair"}).then(t=>this.publicKey=t.data),()=>null)}}const i=new r({webSocketUrl:"/rest/v2/websocket/cloud-connect"});return Object.freeze({server:new class extends d{newKeyPair(t){return super.newKeyPair(t,"cloudConnect.server.newKeyPairConfirm")}getClients(){return t({method:"GET",url:this.baseUrl+"/clients"}).then(t=>this.clients=t.data)}closeSession(n){return t({method:"DELETE",url:this.baseUrl+"/clients/"+encodeURIComponent(n)}).then(t=>t.data)}getAuthorizedKeys(){return t({method:"GET",url:this.baseUrl+"/authorized-keys"}).then(t=>this.authorizedKeys=t.data)}addAuthorizedKey(n){return t({method:"PUT",url:this.baseUrl+"/authorized-keys",data:JSON.stringify(n)}).then(t=>this.authorizedKeys=t.data)}removeAuthorizedKey(n){return t({method:"DELETE",url:this.baseUrl+"/authorized-keys/"+encodeURIComponent(n)}).then(t=>this.authorizedKeys=t.data)}}("/server"),client:new class extends d{newKeyPair(t){return super.newKeyPair(t,"cloudConnect.client.newKeyPairConfirm")}getConnectionStatus(){return t({method:"GET",url:this.baseUrl+"/connection-status"}).then(t=>this.connectionStatus=t.data)}isConnected(){return!!this.connectionStatus&&this.connectionStatus.open&&this.connectionStatus.authenticated&&null==this.connectionStatus.connectionError}isConnecting(){return!!this.connectionStatus&&this.connectionStatus.open&&this.connectionStatus.authenticated&&null==this.connectionStatus.connectionError}hasConnectionError(){return!!this.connectionStatus&&this.connectionStatus.open&&this.connectionStatus.authenticated&&null==this.connectionStatus.connectionError}getKnownHosts(){return t({method:"GET",url:this.baseUrl+"/known-hosts"}).then(t=>this.knownHosts=t.data)}addKnownHost(n){return t({method:"PUT",url:this.baseUrl+"/known-hosts",data:JSON.stringify(n)}).then(t=>this.knownHosts=t.data)}removeKnownHost(n){return t({method:"DELETE",url:this.baseUrl+"/known-hosts/"+encodeURIComponent(n)}).then(t=>this.knownHosts=t.data)}}("/client"),proxy:new class extends d{restart(){let t=["modules.restartConfirm"];s&&(t=["ui.app.restartInstanceConfirm",s.instanceDescription]),e.confirm(event,t).then(()=>o.restart()).then(()=>{e.toastOptions({textTr:"modules.restartScheduled",hideDelay:2e4})},t=>{e.toastOptions({textTr:["ui.app.restartFailed",t.mangoStatusText],hideDelay:1e4,classes:"md-warn"})})}}("/proxy"),notificationManager:i})}$.$inject=["$http","$q","maDialogHelper","maModules","maNotificationManager","$injector"];var w=$;n.default=r.a.module("maCloudConnect",["maUiApp"]).component("maCloudConnectPage",s).component("maCloudConnectServerSettings",i).component("maCloudConnectClientSettings",m).component("maCloudConnectProxySettings",p).component("maCloudConnectConnectedClientsTable",y).component("maCloudConnectClientStatus",f).component("maCloudConnectServerStatus",x).factory("maCloudConnect",w).config(["maUiMenuProvider",function(t){t.registerMenuItems([{name:"ui.settings.cloudConnect",url:"/cloud-connect",template:"<ma-cloud-connect-page><ma-cloud-connect-page>",menuTr:"cloudConnect.description",menuIcon:"cloud",permission:"superadmin",params:{noPadding:!0},requiredTranslations:["cloudConnect","modules"]},{name:"ui.settings.cloudConnectClients",url:"/cloud-connect-clients",template:"<ma-cloud-connect-connected-clients-table><ma-cloud-connect-connected-clients-table>",menuTr:"cloudConnect.server.connectedClients",menuIcon:"cloud_done",permission:"superadmin",requiredTranslations:["cloudConnect","modules"],menuHidden:!0}])}])}]).default});