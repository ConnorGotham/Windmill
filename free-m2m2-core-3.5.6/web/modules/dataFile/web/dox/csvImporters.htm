<p>CSV Files are perhaps the simplest to implement. The abstract class is AbstractCSVDataSource, and the 
required override is importRow(String[] row, int rowNum). Here is a sample implementation:</p>
<pre>
<code>
import java.util.HashMap;
import java.util.Map;

import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import com.infiniteautomation.datafilesource.contexts.AbstractCSVDataSource;
import com.infiniteautomation.datafilesource.dataimage.NumericImportPoint;

public class BasicCSV extends AbstractCSVDataSource {
	DateTimeFormatter dtf = DateTimeFormat.forPattern("MM/dd/yyyy hh:mm");
	Map&lt;String, Integer&gt; headerMap = new HashMap&lt;String, Integer&gt;();
	
	@Override
	public void importRow(String[] row, int rowNum) {
		if(rowNum == 0)
			for (int k = 0; k &lt; row.length; ++k) {
				headerMap.put(row[k], k);
			}
		else
			this.parsedPoints.add( new NumericImportPoint( row[headerMap.get("ID")], 
					Double.parseDouble(row[headerMap.get("Temperature")]), 
					dtf.parseDateTime(row[headerMap.get("Date")] 
					+ " " + row[headerMap.get("Time")]).getMillis(), null ) );
	}
}
</code>
</pre>
