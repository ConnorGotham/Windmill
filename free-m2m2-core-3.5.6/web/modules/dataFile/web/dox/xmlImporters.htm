<p>XML files are parsed using the JAXB unmarshaller, so an annotated template class needs to be provided 
for JAXB to unmarshal the data into. Fortunately, these classes can be automatically generated by tools 
bundled with JAXB and our module, although the final step – modifying the automatically generated class 
tp be compliant with the Mango interface class – requires just a little knowledge of the module and java programming.
The first step is to get a schema definition (.xsd) for the xml you wish to import. Next, you'll run xjc (bundled with 
JAXB) to convert the .xsd to an unmarshalling java class. Next, you'll have to implement a method to return the data.</p>

<p>The XML interface class has only one method that it requires subclasses to implement:</p>
<code>public abstract List&lt;ImportPoint&gt; getParsedPoints();</code>
<p>It is therefore the responsibility of the user to implement this method in their automatically generated XML class, 
as well as addend “implements AbstractXMLDataSource” to the main class definition of the file (the class that shares 
the name with the automatically generated file). This method must be overridden in that class. Here is a sample implementation:</p>
<pre>
<code>
@Override
public List&lt;ImportPoint&gt; getParsedPoints() {
	List&lt;ImportPoint&gt; ans = new ArrayList&lt;ImportPoint&gt;();
SimpleDateFormat dtf = new SimpleDateFormat("MMM dd yyyy hh:mm:ss:SSSaa");
	try {
		for(Record r : this.getRecord()) {
			Date dt = dtf.parse(r.dateTime);
ans.add(new NumericImportPoint(r.pointName, r.pointValue, dt.getTime()));
		}
	} catch(ParseException e) {
		e.printStackTrace();
	}
	return ans;
}
</code>
</pre>
<p>Most automatically generated XML, point history sort of classes will already contain a method that returns the list you’re 
interested in, and coercing this into a list of the class Mango is interested in is usually achievable in a single loop, as 
above. This allows you to type your data by choice of the four Mango data types by creation of either AlphanumericImportPoint, 
NumericImportPoint, MultistateImportPoint, or BinaryImportPoint. All of these take three arguments: 1) the name from the spreadsheet, 
2) the properly typed value (String, double, int, boolean), 3) the date as a long.</p>

<p>Now it’s time to turn this generated and customized class into a .class file so that we can load it into the module. Move this class 
into the “Compiling Grounds” directory in your Data File Data Source module's classes folder. This directory should contain the packages 
of sourcecode we’re going to be importing, namely com/infinteautomation/datafilesource/dataimage/ and others. Navigate to the “Compiling Grounds” 
in your command prompt or terminal, and provided your have java installed, simple type:</p>
<code>javac MyClassName.java</code>
<p>Did you have any compiler errors? No? Good. Now there should be MyClassName.class in that directory, as well as subclass files with names like 
MyClassName$MySubclassName.class. Move all of these .class files together into your Mango_Home/web/modules/dataFile/web/templates/XML directory. Now 
you can enter “MyClassName” as the template for your XML import!</p>
<hr>
<p>A more complex example:</p>
<pre>
<code>	
    @Override
	public List&lt;ImportPoint&gt; getParsedPoints() {
		List&lt;ImportPoint&gt; ans = new ArrayList&lt;ImportPoint&gt;();
		SimpleDateFormat dtf = new SimpleDateFormat("MM/dd/yyyy hh:mm:ss aa");
		try {
			for(TrendValues tv : getTrendValues()) {
				Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
				Date dt = dtf.parse(tv.getDateTime());
				String ident = tv.getIdent();
				params.put("identifier", ident);
				params.put("deviceName", ident.split(" ")[0]);
				params.put("name", ident.substring(ident.indexOf("."), ident.lastIndexOf(".")));
				params.put("xid", "generate");
				ans.add(new NumericImportPoint(ident, 
				    Double.valueOf(tv.getObjectValue().split(" ")[0]), 
				    dt.getTime(), params));
			}
		} catch(ParseException e) {
			e.printStackTrace();
		}
		return ans;
	}
	</code></pre>