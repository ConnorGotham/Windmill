<!--
    Copyright (C) 2014 Infinite Automation Systems Inc. All rights reserved.
    @author Matthew Lohbihler
-->
<h1>Overview</h1>
<p>
  Event handlers provide user-defined behaviour that is to be performed upon the raising of a particular event. Events 
  can be raised due to various system conditions (see the Events section on the general help page for more information). 
  When this happens, associated event handlers are executed.
</p>
<p>
  There are currently three types of event handlers:
</p>
<ul>
  <li><b>Email handlers</b>: send email messages to lists of recipients</li>
  <li><b>Set point handlers</b>: cause a settable point to be set with a given value</li>
  <li><b>Process handlers</b>: cause the given O/S process to be executed</li>
</ul>

<h1>Event types</h1>
<p>
  The event types section arranges all available event types in the system in a tree. The Point event detectors branch 
  contains a list of all points (indicated with <img src="images/icon_comp.png"/>) in the system that have event 
  detectors. The event detectors are listed under their respective point branches.
</p>
<p>
  Event types for system events and event defined by modules are listed under their respective branches. The Data 
  source events branch contains a list of all data sources that can raise events. The events are listed under their 
  respective data source.
</p>
<p>
  To add a new event handler, click the event type that you wish to handle; the event handler details section will be 
  displayed. The actual event handler will not be saved until you click the <img src="images/save_add.png"/> icon. To 
  edit an existing handler, click the handler's name in the list of handlers under the event type's branch.
</p>
<p>
  When you add a new handler, you must select the handler's <b>Type</b>. Once you save a handler, it's type is no
  longer editable.
</p>

<h1>Event alias</h1>
<p>
  An arbitrary event alias can be set by which the event handler will be visually identified. This alias is also used
  as the basis of the subject line for email event handlers.
</p>

<h1>Editing existing handlers</h1>
<p>
  To save changes to a handler, click the <img src="images/save.png"/> icon at the top right of the Event handler 
  section. To delete a handler, click the <img src="images/delete.png"/> icon.
</p>

<h1>Editing email handlers</h1>
<p>
  Email handlers maintain up to three recipient lists. The first is the list to which a message is sent when the event 
  is initially raised. The second is an optional list to which to send escalations. The third is an optional list sent
  when the event become inactive.
</p>
<p>
  To add a mailing list to a recipient list, select it from the <b>Add mailing list</b> drop-down list and click the 
  <img src="images/add.png"/> icon beside the drop-down. To add a user, select it from the <b>Add user</b> list and 
  click the <img src="images/add.png"/> icon beside the drop-down. To add a free-form email address, enter the address 
  in the <b>Add address</b> box and click the <img src="images/add.png"/> icon beside the box. To delete any recipient 
  from a list, click the <img src="images/bullet_delete.png"/> icon beside the recipient. To test a recipient list, 
  click the <img src="images/email_go.png"/> icon for the list.
</p>
<p>
  To have escalation emails sent, check the <b>Send escalation</b> box, and enter the <b>Escalation recipients</b>. The 
  escalation email will only be sent if the associated event has remained active for the <b>Escalate if active for</b> 
  period.
</p>
<p>
  An event inactive notification can be sent by checking the <b>Send inactive notification</b> box. If checked, the 
  notification will be sent to all event recipients once the event becomes inactive. Note that, if an escalation email 
  was not sent, the inactive notification will not be sent to the escalation list. Only those recipients that received 
  an active notification will receive an inactive notification. This behaviour can be overridden by checking the 
  <b>Override inactive recipients</b> checkbox, which allows the setting a list of specific inactive recipients. This 
  can be useful if there are active notification recipients that should not be sent any subsequent emails (like a 
  ticketing system).
</p>
<p>
  Including the system information is optional and in <b>BETA</b>.  It will include a list of all Work Items currently scheduled in Mango.
  They are separated into 3 Groups, High, Medium and Low priority.  This is only included for diagnosing a 'sick' Mango.  It could be 
  problematic if your system has hundreds of thousands or millions of work items, hence the <b>BETA</b> tag with this. 
</p>
<p>
  Including the logfile is optional and can be used to capture the <b>full</b> logfile at the moment of the event.  This is a zip attachment to the email.
</p>
<p>
  A <b>Custom template</b> can be provided to override the event active message sent by the email handler. The default templates
  can be found in Mango/ftl/*/active.ftl (depends on system settings for email) and the include folders. The same object model is 
  passed to the custom template. Having an empty custom template means the default will be used. The textarea can be resized by
  dragging its corner. One can include other FTL files if they are on the loader path, which begins at Mango/ftl/ . To replicate the 
  existing event template, you must add "html" or "text" in front of the include paths when setting the custom template.
</p>
<p>
  Points may be added as <b>Additional context</b> to appear in the model in the 'additionalContext' object using their <b>template key</b>.
  Additional context points have the following hash (object) fields:
</p>
<ul><li>templateKey - the identifier in the additional context hash (object)</li>
<li>name - the point's name</li>
<li>deviceName - the device name for the point</li>
<li>values - a sequence (list) of rendered point value times</li></ul>
<p>
  The event object is added to the model with the key 'evt'. Events have the properties on the evt object
  like those in the EventInstance class. Audit events have the JSON for the changes in question stored in their
  'context' attribute. Data source and data point events store the data source's object under 'evt.context.dataSource'.
  Publisher events have the publisher's object stored in 'evt.context.publisher'. System events have a null evt.context.
  If the event type is defined by a module, the contents of its context should be described in the help for that module.
</p>
<p>
  The whole Map&lt;String, Object&gt; model map is passed into an optionally defined script. The script can manipulate the 'model'
  variable however it sees fit prior to the template being processed. The script can also prevent the sending of the email by doing a 
  "return CANCEL;" or a "return UNCHANGED;"
</p>
<h1>Editing set point handlers</h1>
<p>
  When an event is raised, this handler will set the value of a given settable point. The <b>Target</b> is the settable 
  point that will be set. Optionally, the point may be set with the value which raised the event, but this is only 
  possible if the event was raised by a "value changed" point event detector, and the data type of the target is the 
  same as the data type of the source. To have the target be set with the source value, check the <b>Use source 
  value</b> box. Otherwise, enter the value to which to set the target in the <b>Value to set</b> area.
</p>

<p>
  It is also possible to use a script to compute the value to set to the target point. Set point scripts can have
  data points added into the context of the event, and the target point is always added under the key "target". If a
  point is disabled it will simply not be added to the context, so typeof(disabledVariableName) === "undefined"
</p>

<h1>Editing process handlers</h1>
<p>
  This handler will execute a local process, or shell command, optionally when an event is raised or deactivated. 
  The respective commands can be any shell command appropriate to the host. Commands should be specified as they would
  be from a terminal command prompt. For very complex commands, you may find it convenient to write a shell script, 
  and then call the script from Mango.
</p>

<p>
  If a process fails to initiate for any reason, a system event will be raised providing the failure description. 
  Also, processes will be terminated if they run for longer than 15 seconds. Non-empty standard output from the process 
  will be written to the Mango log at an "information" level. Non-empty error output will be written to the Mango log
  at an "error" level.
</p>
